/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC777Sender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Sender__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "AgreementBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgreementBase__factory>;
    getContractFactory(
      name: "ConstantFlowAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstantFlowAgreementV1__factory>;
    getContractFactory(
      name: "GeneralDistributionAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GeneralDistributionAgreementV1__factory>;
    getContractFactory(
      name: "InstantDistributionAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InstantDistributionAgreementV1__factory>;
    getContractFactory(
      name: "SuperAppBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppBase__factory>;
    getContractFactory(
      name: "SuperfluidGovernanceBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidGovernanceBase__factory>;
    getContractFactory(
      name: "SuperfluidGovernanceII",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidGovernanceII__factory>;
    getContractFactory(
      name: "SuperfluidGovernanceIIProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidGovernanceIIProxy__factory>;
    getContractFactory(
      name: "IConstantFlowAgreementHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConstantFlowAgreementHook__factory>;
    getContractFactory(
      name: "IConstantFlowAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConstantFlowAgreementV1__factory>;
    getContractFactory(
      name: "IGeneralDistributionAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralDistributionAgreementV1__factory>;
    getContractFactory(
      name: "IInstantDistributionAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstantDistributionAgreementV1__factory>;
    getContractFactory(
      name: "IConstantInflowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConstantInflowNFT__factory>;
    getContractFactory(
      name: "IConstantOutflowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConstantOutflowNFT__factory>;
    getContractFactory(
      name: "IFlowNFTBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlowNFTBase__factory>;
    getContractFactory(
      name: "ISuperAgreement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperAgreement__factory>;
    getContractFactory(
      name: "ISuperApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperApp__factory>;
    getContractFactory(
      name: "ISuperfluid",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluid__factory>;
    getContractFactory(
      name: "ISuperfluidGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluidGovernance__factory>;
    getContractFactory(
      name: "ISuperfluidToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluidToken__factory>;
    getContractFactory(
      name: "ISuperToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperToken__factory>;
    getContractFactory(
      name: "ISuperTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperTokenFactory__factory>;
    getContractFactory(
      name: "ISuperTokenPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperTokenPool__factory>;
    getContractFactory(
      name: "ERC20WithTokenInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithTokenInfo__factory>;
    getContractFactory(
      name: "IPureSuperToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPureSuperToken__factory>;
    getContractFactory(
      name: "IPureSuperTokenCustom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPureSuperTokenCustom__factory>;
    getContractFactory(
      name: "ISETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISETH__factory>;
    getContractFactory(
      name: "ISETHCustom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISETHCustom__factory>;
    getContractFactory(
      name: "TokenInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenInfo__factory>;
    getContractFactory(
      name: "IMultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiSigWallet__factory>;
    getContractFactory(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayRecipient__factory>;
    getContractFactory(
      name: "IResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IResolver__factory>;
    getContractFactory(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRelayRecipient__factory>;
    getContractFactory(
      name: "EventsEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventsEmitter__factory>;
    getContractFactory(
      name: "SlotsBitmapLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlotsBitmapLibrary__factory>;
    getContractFactory(
      name: "AgreementMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgreementMock__factory>;
    getContractFactory(
      name: "CallUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallUtilsMock__factory>;
    getContractFactory(
      name: "CallUtilsTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallUtilsTester__factory>;
    getContractFactory(
      name: "ClosingOnUpdateFlowTestApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClosingOnUpdateFlowTestApp__factory>;
    getContractFactory(
      name: "ExclusiveInflowTestApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusiveInflowTestApp__factory>;
    getContractFactory(
      name: "FlowExchangeTestApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowExchangeTestApp__factory>;
    getContractFactory(
      name: "NonClosableOutflowTestApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonClosableOutflowTestApp__factory>;
    getContractFactory(
      name: "SelfDeletingFlowTestApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfDeletingFlowTestApp__factory>;
    getContractFactory(
      name: "CFALibraryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CFALibraryMock__factory>;
    getContractFactory(
      name: "CFALibrarySuperAppMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CFALibrarySuperAppMock__factory>;
    getContractFactory(
      name: "CustomSuperTokenBaseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomSuperTokenBaseMock__factory>;
    getContractFactory(
      name: "CustomSuperTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomSuperTokenMock__factory>;
    getContractFactory(
      name: "CustomSuperTokenProxyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomSuperTokenProxyMock__factory>;
    getContractFactory(
      name: "ERC777RecipientDrainingGas",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777RecipientDrainingGas__factory>;
    getContractFactory(
      name: "ERC777RecipientReverting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777RecipientReverting__factory>;
    getContractFactory(
      name: "ERC777SenderRecipientMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777SenderRecipientMock__factory>;
    getContractFactory(
      name: "FakeSuperfluidMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeSuperfluidMock__factory>;
    getContractFactory(
      name: "ForwarderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderMock__factory>;
    getContractFactory(
      name: "IDASuperAppTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDASuperAppTester__factory>;
    getContractFactory(
      name: "IDAv1LibraryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAv1LibraryMock__factory>;
    getContractFactory(
      name: "IDAv1LibrarySuperAppMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAv1LibrarySuperAppMock__factory>;
    getContractFactory(
      name: "MockSmartWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSmartWallet__factory>;
    getContractFactory(
      name: "MultiFlowTesterApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiFlowTesterApp__factory>;
    getContractFactory(
      name: "StreamRedirector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StreamRedirector__factory>;
    getContractFactory(
      name: "SuperAppFactoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppFactoryMock__factory>;
    getContractFactory(
      name: "SuperAppMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMock__factory>;
    getContractFactory(
      name: "SuperAppMock2ndLevel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMock2ndLevel__factory>;
    getContractFactory(
      name: "SuperAppMockAux",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMockAux__factory>;
    getContractFactory(
      name: "SuperAppMockReturningEmptyCtx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMockReturningEmptyCtx__factory>;
    getContractFactory(
      name: "SuperAppMockReturningInvalidCtx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMockReturningInvalidCtx__factory>;
    getContractFactory(
      name: "SuperAppMockUsingDeprecatedRegisterApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMockUsingDeprecatedRegisterApp__factory>;
    getContractFactory(
      name: "SuperAppMockWithRegistrationKey",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperAppMockWithRegistrationKey__factory>;
    getContractFactory(
      name: "SuperfluidDestructorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidDestructorMock__factory>;
    getContractFactory(
      name: "SuperfluidGovernanceIIUpgradabilityTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidGovernanceIIUpgradabilityTester__factory>;
    getContractFactory(
      name: "SuperfluidMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidMock__factory>;
    getContractFactory(
      name: "SuperfluidUpgradabilityTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidUpgradabilityTester__factory>;
    getContractFactory(
      name: "SuperTokenFactoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactoryMock__factory>;
    getContractFactory(
      name: "SuperTokenFactoryMock42",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactoryMock42__factory>;
    getContractFactory(
      name: "SuperTokenFactoryStorageLayoutTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactoryStorageLayoutTester__factory>;
    getContractFactory(
      name: "SuperTokenFactoryUpdateLogicContractsTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactoryUpdateLogicContractsTester__factory>;
    getContractFactory(
      name: "SuperTokenLibraryCFAMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenLibraryCFAMock__factory>;
    getContractFactory(
      name: "SuperTokenLibraryCFASuperAppMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenLibraryCFASuperAppMock__factory>;
    getContractFactory(
      name: "SuperTokenLibraryIDAMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenLibraryIDAMock__factory>;
    getContractFactory(
      name: "SuperTokenLibraryIDASuperAppMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenLibraryIDASuperAppMock__factory>;
    getContractFactory(
      name: "SuperTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenMock__factory>;
    getContractFactory(
      name: "SuperTokenStorageLayoutTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenStorageLayoutTester__factory>;
    getContractFactory(
      name: "UUPSProxiableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSProxiableMock__factory>;
    getContractFactory(
      name: "ConstantInflowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstantInflowNFT__factory>;
    getContractFactory(
      name: "ConstantOutflowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstantOutflowNFT__factory>;
    getContractFactory(
      name: "FlowNFTBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowNFTBase__factory>;
    getContractFactory(
      name: "FullUpgradableSuperTokenProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FullUpgradableSuperTokenProxy__factory>;
    getContractFactory(
      name: "Superfluid",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Superfluid__factory>;
    getContractFactory(
      name: "SuperfluidToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidToken__factory>;
    getContractFactory(
      name: "SuperToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperToken__factory>;
    getContractFactory(
      name: "SuperTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactory__factory>;
    getContractFactory(
      name: "SuperTokenFactoryBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenFactoryBase__factory>;
    getContractFactory(
      name: "SuperTokenPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenPool__factory>;
    getContractFactory(
      name: "GDADeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GDADeployer__factory>;
    getContractFactory(
      name: "PureSuperToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PureSuperToken__factory>;
    getContractFactory(
      name: "SETHProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SETHProxy__factory>;
    getContractFactory(
      name: "UUPSProxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSProxiable__factory>;
    getContractFactory(
      name: "UUPSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSProxy__factory>;
    getContractFactory(
      name: "BatchLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchLiquidator__factory>;
    getContractFactory(
      name: "CFAv1Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CFAv1Forwarder__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "SuperfluidFrameworkDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidFrameworkDeployer__factory>;
    getContractFactory(
      name: "SuperfluidLoader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperfluidLoader__factory>;
    getContractFactory(
      name: "SuperTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperTokenDeployer__factory>;
    getContractFactory(
      name: "SuperUpgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperUpgrader__factory>;
    getContractFactory(
      name: "TestGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestGovernance__factory>;
    getContractFactory(
      name: "TestResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestResolver__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "ITOGAv1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITOGAv1__factory>;
    getContractFactory(
      name: "ITOGAv2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITOGAv2__factory>;
    getContractFactory(
      name: "ITOGAv3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITOGAv3__factory>;
    getContractFactory(
      name: "TOGA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TOGA__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC777Sender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Sender>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Implementer>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "AgreementBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgreementBase>;
    getContractAt(
      name: "ConstantFlowAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstantFlowAgreementV1>;
    getContractAt(
      name: "GeneralDistributionAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GeneralDistributionAgreementV1>;
    getContractAt(
      name: "InstantDistributionAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InstantDistributionAgreementV1>;
    getContractAt(
      name: "SuperAppBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppBase>;
    getContractAt(
      name: "SuperfluidGovernanceBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidGovernanceBase>;
    getContractAt(
      name: "SuperfluidGovernanceII",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidGovernanceII>;
    getContractAt(
      name: "SuperfluidGovernanceIIProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidGovernanceIIProxy>;
    getContractAt(
      name: "IConstantFlowAgreementHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConstantFlowAgreementHook>;
    getContractAt(
      name: "IConstantFlowAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConstantFlowAgreementV1>;
    getContractAt(
      name: "IGeneralDistributionAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralDistributionAgreementV1>;
    getContractAt(
      name: "IInstantDistributionAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstantDistributionAgreementV1>;
    getContractAt(
      name: "IConstantInflowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConstantInflowNFT>;
    getContractAt(
      name: "IConstantOutflowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConstantOutflowNFT>;
    getContractAt(
      name: "IFlowNFTBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlowNFTBase>;
    getContractAt(
      name: "ISuperAgreement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperAgreement>;
    getContractAt(
      name: "ISuperApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperApp>;
    getContractAt(
      name: "ISuperfluid",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluid>;
    getContractAt(
      name: "ISuperfluidGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluidGovernance>;
    getContractAt(
      name: "ISuperfluidToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluidToken>;
    getContractAt(
      name: "ISuperToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperToken>;
    getContractAt(
      name: "ISuperTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperTokenFactory>;
    getContractAt(
      name: "ISuperTokenPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperTokenPool>;
    getContractAt(
      name: "ERC20WithTokenInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithTokenInfo>;
    getContractAt(
      name: "IPureSuperToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPureSuperToken>;
    getContractAt(
      name: "IPureSuperTokenCustom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPureSuperTokenCustom>;
    getContractAt(
      name: "ISETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISETH>;
    getContractAt(
      name: "ISETHCustom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISETHCustom>;
    getContractAt(
      name: "TokenInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenInfo>;
    getContractAt(
      name: "IMultiSigWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiSigWallet>;
    getContractAt(
      name: "IRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayRecipient>;
    getContractAt(
      name: "IResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IResolver>;
    getContractAt(
      name: "BaseRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRelayRecipient>;
    getContractAt(
      name: "EventsEmitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventsEmitter>;
    getContractAt(
      name: "SlotsBitmapLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlotsBitmapLibrary>;
    getContractAt(
      name: "AgreementMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgreementMock>;
    getContractAt(
      name: "CallUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallUtilsMock>;
    getContractAt(
      name: "CallUtilsTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallUtilsTester>;
    getContractAt(
      name: "ClosingOnUpdateFlowTestApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClosingOnUpdateFlowTestApp>;
    getContractAt(
      name: "ExclusiveInflowTestApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusiveInflowTestApp>;
    getContractAt(
      name: "FlowExchangeTestApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowExchangeTestApp>;
    getContractAt(
      name: "NonClosableOutflowTestApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonClosableOutflowTestApp>;
    getContractAt(
      name: "SelfDeletingFlowTestApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfDeletingFlowTestApp>;
    getContractAt(
      name: "CFALibraryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CFALibraryMock>;
    getContractAt(
      name: "CFALibrarySuperAppMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CFALibrarySuperAppMock>;
    getContractAt(
      name: "CustomSuperTokenBaseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomSuperTokenBaseMock>;
    getContractAt(
      name: "CustomSuperTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomSuperTokenMock>;
    getContractAt(
      name: "CustomSuperTokenProxyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomSuperTokenProxyMock>;
    getContractAt(
      name: "ERC777RecipientDrainingGas",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777RecipientDrainingGas>;
    getContractAt(
      name: "ERC777RecipientReverting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777RecipientReverting>;
    getContractAt(
      name: "ERC777SenderRecipientMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777SenderRecipientMock>;
    getContractAt(
      name: "FakeSuperfluidMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeSuperfluidMock>;
    getContractAt(
      name: "ForwarderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderMock>;
    getContractAt(
      name: "IDASuperAppTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDASuperAppTester>;
    getContractAt(
      name: "IDAv1LibraryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAv1LibraryMock>;
    getContractAt(
      name: "IDAv1LibrarySuperAppMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAv1LibrarySuperAppMock>;
    getContractAt(
      name: "MockSmartWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSmartWallet>;
    getContractAt(
      name: "MultiFlowTesterApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiFlowTesterApp>;
    getContractAt(
      name: "StreamRedirector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StreamRedirector>;
    getContractAt(
      name: "SuperAppFactoryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppFactoryMock>;
    getContractAt(
      name: "SuperAppMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMock>;
    getContractAt(
      name: "SuperAppMock2ndLevel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMock2ndLevel>;
    getContractAt(
      name: "SuperAppMockAux",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMockAux>;
    getContractAt(
      name: "SuperAppMockReturningEmptyCtx",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMockReturningEmptyCtx>;
    getContractAt(
      name: "SuperAppMockReturningInvalidCtx",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMockReturningInvalidCtx>;
    getContractAt(
      name: "SuperAppMockUsingDeprecatedRegisterApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMockUsingDeprecatedRegisterApp>;
    getContractAt(
      name: "SuperAppMockWithRegistrationKey",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperAppMockWithRegistrationKey>;
    getContractAt(
      name: "SuperfluidDestructorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidDestructorMock>;
    getContractAt(
      name: "SuperfluidGovernanceIIUpgradabilityTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidGovernanceIIUpgradabilityTester>;
    getContractAt(
      name: "SuperfluidMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidMock>;
    getContractAt(
      name: "SuperfluidUpgradabilityTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidUpgradabilityTester>;
    getContractAt(
      name: "SuperTokenFactoryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactoryMock>;
    getContractAt(
      name: "SuperTokenFactoryMock42",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactoryMock42>;
    getContractAt(
      name: "SuperTokenFactoryStorageLayoutTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactoryStorageLayoutTester>;
    getContractAt(
      name: "SuperTokenFactoryUpdateLogicContractsTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactoryUpdateLogicContractsTester>;
    getContractAt(
      name: "SuperTokenLibraryCFAMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenLibraryCFAMock>;
    getContractAt(
      name: "SuperTokenLibraryCFASuperAppMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenLibraryCFASuperAppMock>;
    getContractAt(
      name: "SuperTokenLibraryIDAMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenLibraryIDAMock>;
    getContractAt(
      name: "SuperTokenLibraryIDASuperAppMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenLibraryIDASuperAppMock>;
    getContractAt(
      name: "SuperTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenMock>;
    getContractAt(
      name: "SuperTokenStorageLayoutTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenStorageLayoutTester>;
    getContractAt(
      name: "UUPSProxiableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSProxiableMock>;
    getContractAt(
      name: "ConstantInflowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstantInflowNFT>;
    getContractAt(
      name: "ConstantOutflowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstantOutflowNFT>;
    getContractAt(
      name: "FlowNFTBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowNFTBase>;
    getContractAt(
      name: "FullUpgradableSuperTokenProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FullUpgradableSuperTokenProxy>;
    getContractAt(
      name: "Superfluid",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Superfluid>;
    getContractAt(
      name: "SuperfluidToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidToken>;
    getContractAt(
      name: "SuperToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperToken>;
    getContractAt(
      name: "SuperTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactory>;
    getContractAt(
      name: "SuperTokenFactoryBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenFactoryBase>;
    getContractAt(
      name: "SuperTokenPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenPool>;
    getContractAt(
      name: "GDADeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GDADeployer>;
    getContractAt(
      name: "PureSuperToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PureSuperToken>;
    getContractAt(
      name: "SETHProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SETHProxy>;
    getContractAt(
      name: "UUPSProxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSProxiable>;
    getContractAt(
      name: "UUPSProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSProxy>;
    getContractAt(
      name: "BatchLiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchLiquidator>;
    getContractAt(
      name: "CFAv1Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CFAv1Forwarder>;
    getContractAt(
      name: "Resolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "SuperfluidFrameworkDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidFrameworkDeployer>;
    getContractAt(
      name: "SuperfluidLoader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperfluidLoader>;
    getContractAt(
      name: "SuperTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperTokenDeployer>;
    getContractAt(
      name: "SuperUpgrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperUpgrader>;
    getContractAt(
      name: "TestGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestGovernance>;
    getContractAt(
      name: "TestResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestResolver>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "ITOGAv1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITOGAv1>;
    getContractAt(
      name: "ITOGAv2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITOGAv2>;
    getContractAt(
      name: "ITOGAv3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITOGAv3>;
    getContractAt(
      name: "TOGA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TOGA>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
