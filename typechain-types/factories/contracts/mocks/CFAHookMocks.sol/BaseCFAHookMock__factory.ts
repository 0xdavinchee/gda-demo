/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  BaseCFAHookMock,
  BaseCFAHookMockInterface,
} from "../../../../contracts/mocks/CFAHookMocks.sol/BaseCFAHookMock";

const _abi = [
  {
    inputs: [],
    name: "NOT_CFA",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_OWNER",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "flowOperator",
            type: "address",
          },
          {
            internalType: "int96",
            name: "flowRate",
            type: "int96",
          },
        ],
        internalType: "struct IConstantFlowAgreementHook.CFAHookParams",
        name: "newFlowData",
        type: "tuple",
      },
    ],
    name: "onCreate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "flowOperator",
            type: "address",
          },
          {
            internalType: "int96",
            name: "flowRate",
            type: "int96",
          },
        ],
        internalType: "struct IConstantFlowAgreementHook.CFAHookParams",
        name: "newFlowData",
        type: "tuple",
      },
      {
        internalType: "int96",
        name: "oldFlowRate",
        type: "int96",
      },
    ],
    name: "onDelete",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "flowOperator",
            type: "address",
          },
          {
            internalType: "int96",
            name: "flowRate",
            type: "int96",
          },
        ],
        internalType: "struct IConstantFlowAgreementHook.CFAHookParams",
        name: "newFlowData",
        type: "tuple",
      },
      {
        internalType: "int96",
        name: "oldFlowRate",
        type: "int96",
      },
    ],
    name: "onUpdate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ConstantFlowAgreementV1",
        name: "_cfaV1",
        type: "address",
      },
    ],
    name: "setCFA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class BaseCFAHookMock__factory {
  static readonly abi = _abi;
  static createInterface(): BaseCFAHookMockInterface {
    return new utils.Interface(_abi) as BaseCFAHookMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseCFAHookMock {
    return new Contract(address, _abi, signerOrProvider) as BaseCFAHookMock;
  }
}
