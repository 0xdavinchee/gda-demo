/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SuperAppFactoryMock,
  SuperAppFactoryMockInterface,
} from "../../../../contracts/mocks/SuperAppMocks.sol/SuperAppFactoryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
      {
        internalType: "contract ISuperApp",
        name: "app",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "configWord",
        type: "uint256",
      },
    ],
    name: "registerAppWithHost",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061012c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ad88671d14602d575b600080fd5b603c603836600460ba565b603e565b005b6040516379b9982960e11b81526001600160a01b0383811660048301526024820183905284169063f373305290604401600060405180830381600087803b158015608757600080fd5b505af1158015609a573d6000803e3d6000fd5b50505050505050565b6001600160a01b038116811460b757600080fd5b50565b60008060006060848603121560ce57600080fd5b833560d78160a3565b9250602084013560e58160a3565b92959294505050604091909101359056fea2646970667358221220b613d437d2af6dbc8f7d9c63b2f78e0c8ddb4f23263986bc0922ffa37f3c68c464736f6c63430008130033";

type SuperAppFactoryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SuperAppFactoryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SuperAppFactoryMock__factory extends ContractFactory {
  constructor(...args: SuperAppFactoryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SuperAppFactoryMock> {
    return super.deploy(overrides || {}) as Promise<SuperAppFactoryMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SuperAppFactoryMock {
    return super.attach(address) as SuperAppFactoryMock;
  }
  override connect(signer: Signer): SuperAppFactoryMock__factory {
    return super.connect(signer) as SuperAppFactoryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SuperAppFactoryMockInterface {
    return new utils.Interface(_abi) as SuperAppFactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SuperAppFactoryMock {
    return new Contract(address, _abi, signerOrProvider) as SuperAppFactoryMock;
  }
}
