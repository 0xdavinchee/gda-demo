/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SuperAppMockUsingDeprecatedRegisterApp,
  SuperAppMockUsingDeprecatedRegisterAppInterface,
} from "../../../../contracts/mocks/SuperAppMocks.sol/SuperAppMockUsingDeprecatedRegisterApp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "configWord",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405161010f38038061010f833981016040819052602c91608a565b6040516315a722b960e31b8152600481018290526001600160a01b0383169063ad3915c890602401600060405180830381600087803b158015606d57600080fd5b505af11580156080573d6000803e3d6000fd5b50505050505060c2565b60008060408385031215609c57600080fd5b82516001600160a01b038116811460b257600080fd5b6020939093015192949293505050565b603f806100d06000396000f3fe6080604052600080fdfea26469706673582212209144a5f41e229c49a39e4f69d314c41a1f2ef05da55a8e003eb2ab6e32ac20c264736f6c63430008130033";

type SuperAppMockUsingDeprecatedRegisterAppConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SuperAppMockUsingDeprecatedRegisterAppConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SuperAppMockUsingDeprecatedRegisterApp__factory extends ContractFactory {
  constructor(
    ...args: SuperAppMockUsingDeprecatedRegisterAppConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    host: PromiseOrValue<string>,
    configWord: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SuperAppMockUsingDeprecatedRegisterApp> {
    return super.deploy(
      host,
      configWord,
      overrides || {}
    ) as Promise<SuperAppMockUsingDeprecatedRegisterApp>;
  }
  override getDeployTransaction(
    host: PromiseOrValue<string>,
    configWord: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(host, configWord, overrides || {});
  }
  override attach(address: string): SuperAppMockUsingDeprecatedRegisterApp {
    return super.attach(address) as SuperAppMockUsingDeprecatedRegisterApp;
  }
  override connect(
    signer: Signer
  ): SuperAppMockUsingDeprecatedRegisterApp__factory {
    return super.connect(
      signer
    ) as SuperAppMockUsingDeprecatedRegisterApp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SuperAppMockUsingDeprecatedRegisterAppInterface {
    return new utils.Interface(
      _abi
    ) as SuperAppMockUsingDeprecatedRegisterAppInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SuperAppMockUsingDeprecatedRegisterApp {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SuperAppMockUsingDeprecatedRegisterApp;
  }
}
