/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SuperTokenFactoryStorageLayoutTester,
  SuperTokenFactoryStorageLayoutTesterInterface,
} from "../../../../contracts/mocks/SuperTokenFactoryMock.sol/SuperTokenFactoryStorageLayoutTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
      {
        internalType: "contract ISuperToken",
        name: "superTokenLogic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_ONLY_GOVERNANCE_OWNER",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_ONLY_HOST",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_UNINITIALIZED",
    type: "error",
  },
  {
    inputs: [],
    name: "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "uuid",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "codeAddress",
        type: "address",
      },
    ],
    name: "CodeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperToken",
        name: "token",
        type: "address",
      },
    ],
    name: "CustomSuperTokenCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperToken",
        name: "token",
        type: "address",
      },
    ],
    name: "SuperTokenCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperToken",
        name: "tokenLogic",
        type: "address",
      },
    ],
    name: "SuperTokenLogicCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "_SUPER_TOKEN_LOGIC",
    outputs: [
      {
        internalType: "contract ISuperToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "castrate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlyingToken",
        type: "address",
      },
    ],
    name: "computeCanonicalERC20WrapperAddress",
    outputs: [
      {
        internalType: "address",
        name: "superTokenAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isDeployed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20WithTokenInfo",
        name: "_underlyingToken",
        type: "address",
      },
    ],
    name: "createCanonicalERC20Wrapper",
    outputs: [
      {
        internalType: "contract ISuperToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20WithTokenInfo",
        name: "underlyingToken",
        type: "address",
      },
      {
        internalType: "enum ISuperTokenFactory.Upgradability",
        name: "upgradability",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "createERC20Wrapper",
    outputs: [
      {
        internalType: "contract ISuperToken",
        name: "superToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "underlyingToken",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "underlyingDecimals",
        type: "uint8",
      },
      {
        internalType: "enum ISuperTokenFactory.Upgradability",
        name: "upgradability",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "createERC20Wrapper",
    outputs: [
      {
        internalType: "contract ISuperToken",
        name: "superToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlyingTokenAddress",
        type: "address",
      },
    ],
    name: "getCanonicalERC20Wrapper",
    outputs: [
      {
        internalType: "address",
        name: "superTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCodeAddress",
    outputs: [
      {
        internalType: "address",
        name: "codeAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getHost",
    outputs: [
      {
        internalType: "address",
        name: "host",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSuperTokenLogic",
    outputs: [
      {
        internalType: "contract ISuperToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "underlyingToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "superToken",
            type: "address",
          },
        ],
        internalType: "struct SuperTokenFactoryBase.InitializeData[]",
        name: "_data",
        type: "tuple[]",
      },
    ],
    name: "initializeCanonicalWrapperSuperTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "customSuperTokenProxy",
        type: "address",
      },
    ],
    name: "initializeCustomSuperToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "updateCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "validateStorageLayout",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001c2138038062001c218339810160408190526200003491620000fb565b6001600160a01b0380831660a052811660808190526040805163132075a760e31b81529051849284929091639903ad389160048082019260009290919082900301818387803b1580156200008757600080fd5b505af11580156200009c573d6000803e3d6000fd5b505050506080516001600160a01b03167fc13fb19d60857980e565bf5dae406b8802d3c1cec50c6156b30b12b87402978360405160405180910390a2505050506200013a565b6001600160a01b0381168114620000f857600080fd5b50565b600080604083850312156200010f57600080fd5b82516200011c81620000e2565b60208401519092506200012f81620000e2565b809150509250929050565b60805160a051611a976200018a60003960008181610137015281816106e0015261086b0152600081816101c301528181610244015281816103d001528181610b320152610de70152611a976000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806397e011ed11610097578063cbf927b311610066578063cbf927b31461023f578063d412d34414610266578063eff0a89d14610279578063f99a38c41461018157600080fd5b806397e011ed146101e75780639903ad38146101b9578063a6d0c534146101fa578063bab74c891461020d57600080fd5b806350d75d25116100d357806350d75d251461018357806352d1902d1461018b5780638129fc1c146101b95780639470a5b2146101c157600080fd5b8063151188dc1461010557806320bc442514610135578063431f14811461015b578063469519541461016e575b600080fd5b6101186101133660046110ef565b6102a5565b6040516001600160a01b0390911681526020015b60405180910390f35b7f0000000000000000000000000000000000000000000000000000000000000000610118565b610118610169366004611170565b610658565b61018161017c3660046110ef565b6106d5565b005b61011861072a565b6040517fb146a22bc9644a3313a7e28592f37d32718a2b618d3d136aa524b0d86b87b620815260200161012c565b610181610759565b7f0000000000000000000000000000000000000000000000000000000000000000610118565b6101816101f5366004611203565b610867565b610118610208366004611287565b610a7c565b61022061021b3660046110ef565b610ccd565b604080516001600160a01b03909316835290151560208301520161012c565b6101187f000000000000000000000000000000000000000000000000000000000000000081565b6101816102743660046110ef565b610dd0565b6101186102873660046110ef565b6001600160a01b039081166000908152600160205260409020541690565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03166102f7576040516306ce6e6d60e21b815260040160405180910390fd5b6001600160a01b038083166000908152600160205260409020548391168015610333576040516348eb3cb960e11b815260040160405180910390fd5b604080516001600160a01b038416602082015260009101604051602081830303815290604052805190602001209050600081604051610371906110c0565b8190604051809103906000f5905080158015610391573d6000803e3d6000fd5b506001600160a01b038581166000908152600160205260409081902080546001600160a01b0319168484169081179091559051634a0687ef60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092166004830152919250634a0687ef90602401600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b5050505060008190506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e919061132d565b90506000886001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105089190810190611384565b90506000896001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561054a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105729190810190611384565b9050836001600160a01b03166342fe09808b85856040516020016105969190611426565b604051602081830303815290604052856040516020016105b69190611454565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016105e494939291906114a5565b600060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b50506040516001600160a01b03871692507fb52c6d9d122e8c07769b96d7bb14e66db58ee03fdebaaa2f92547e9c7ef0e65f9150600090a2509198975050505050505050565b60006106ca87886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c0919061132d565b8888888888610a7c565b979650505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461071e5760405163478b8e8360e01b815260040160405180910390fd5b61072781610e86565b50565b60006107547f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b600054610100900460ff16158080156107795750600054600160ff909116105b806107935750303b158015610793575060005460ff166001145b6107fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561081e576000805461ff0019166101001790555b8015610727576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663289b3c0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb91906114e4565b9050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f91906114e4565b6001600160a01b0316336001600160a01b03161461098057604051632bf2a63360e21b815260040160405180910390fd5b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b0316156109d2576040516348eb3cb960e11b815260040160405180910390fd5b60005b82811015610a76578383828181106109ef576109ef611501565b9050604002016020016020810190610a0791906110ef565b60016000868685818110610a1d57610a1d611501565b610a3392602060409092020190810191506110ef565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610a6e81611517565b9150506109d5565b50505050565b60006001600160a01b038816610aa55760405163182e4f4160e11b815260040160405180910390fd5b6000866002811115610ab957610ab961153e565b03610ad75760405163c4901a4360e01b815260040160405180910390fd5b6001866002811115610aeb57610aeb61153e565b03610ba3576000604051610afe906110c0565b604051809103906000f080158015610b1a573d6000803e3d6000fd5b50604051634a0687ef60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291925090821690634a0687ef90602401600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b5050505080915050610c27565b6000604051610bb1906110cd565b604051809103906000f080158015610bcd573d6000803e3d6000fd5b509050806001600160a01b0316638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c0b57600080fd5b505af1158015610c1f573d6000803e3d6000fd5b509293505050505b6040516285fc1360e71b81526001600160a01b038216906342fe098090610c5c908b908b908a908a908a908a9060040161157d565b600060405180830381600087803b158015610c7657600080fd5b505af1158015610c8a573d6000803e3d6000fd5b50506040516001600160a01b03841692507fb52c6d9d122e8c07769b96d7bb14e66db58ee03fdebaaa2f92547e9c7ef0e65f9150600090a2979650505050505050565b6001600160a01b0380821660009081526001602052604081205490918291168015610cfe5780925060019150610dca565b600060405180602001610d10906110c0565b601f1982820381018352601f9091011660408181526001600160a01b03881660208301529192506001600160f81b031991309101604051602081830303815290604052805190602001208380519060200120604051602001610da994939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b6040516020818303038152906040528051906020012060001c935060009250505b50915091565b604051634a0687ef60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152829190821690634a0687ef90602401600060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b50506040516001600160a01b03851692507f437790724a6e97b75d23117f28cdd4b1beeafc34f7a0911ef256e9334f4369a59150600090a25050565b6000610eb07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b031603610f065760405162461bcd60e51b815260206004820152601d60248201527f5555505350726f786961626c653a206e6f742075706772616461626c6500000060448201526064016107f2565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6891906115cb565b7fb146a22bc9644a3313a7e28592f37d32718a2b618d3d136aa524b0d86b87b62014610fe25760405162461bcd60e51b815260206004820152602360248201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60448201526267696360e81b60648201526084016107f2565b6001600160a01b038116300361103a5760405162461bcd60e51b815260206004820152601960248201527f5555505350726f786961626c653a2070726f7879206c6f6f700000000000000060448201526064016107f2565b611062817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc7fb146a22bc9644a3313a7e28592f37d32718a2b618d3d136aa524b0d86b87b620604080519182526001600160a01b03841660208301520161085c565b61024a806115e583390190565b6102338061182f83390190565b6001600160a01b038116811461072757600080fd5b60006020828403121561110157600080fd5b813561110c816110da565b9392505050565b80356003811061112257600080fd5b919050565b60008083601f84011261113957600080fd5b50813567ffffffffffffffff81111561115157600080fd5b60208301915083602082850101111561116957600080fd5b9250929050565b6000806000806000806080878903121561118957600080fd5b8635611194816110da565b95506111a260208801611113565b9450604087013567ffffffffffffffff808211156111bf57600080fd5b6111cb8a838b01611127565b909650945060608901359150808211156111e457600080fd5b506111f189828a01611127565b979a9699509497509295939492505050565b6000806020838503121561121657600080fd5b823567ffffffffffffffff8082111561122e57600080fd5b818501915085601f83011261124257600080fd5b81358181111561125157600080fd5b8660208260061b850101111561126657600080fd5b60209290920196919550909350505050565b60ff8116811461072757600080fd5b600080600080600080600060a0888a0312156112a257600080fd5b87356112ad816110da565b965060208801356112bd81611278565b95506112cb60408901611113565b9450606088013567ffffffffffffffff808211156112e857600080fd5b6112f48b838c01611127565b909650945060808a013591508082111561130d57600080fd5b5061131a8a828b01611127565b989b979a50959850939692959293505050565b60006020828403121561133f57600080fd5b815161110c81611278565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561137b578181015183820152602001611363565b50506000910152565b60006020828403121561139657600080fd5b815167ffffffffffffffff808211156113ae57600080fd5b818401915084601f8301126113c257600080fd5b8151818111156113d4576113d461134a565b604051601f8201601f19908116603f011681019083821181831017156113fc576113fc61134a565b8160405282815287602084870101111561141557600080fd5b6106ca836020830160208801611360565b65029bab832b9160d51b815260008251611447816006850160208701611360565b9190910160060192915050565b60008251611466818460208701611360565b600f60fb1b920191825250600101919050565b60008151808452611491816020860160208601611360565b601f01601f19169290920160200192915050565b6001600160a01b038516815260ff841660208201526080604082018190526000906114d290830185611479565b82810360608401526106ca8185611479565b6000602082840312156114f657600080fd5b815161110c816110da565b634e487b7160e01b600052603260045260246000fd5b60006001820161153757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038716815260ff861660208201526080604082018190526000906115ab9083018688611554565b82810360608401526115be818587611554565b9998505050505050505050565b6000602082840312156115dd57600080fd5b505191905056fe608060405234801561001057600080fd5b5061022a806100206000396000f3fe6080604052600436106100225760003560e01c80634a0687ef1461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f6100543660046101c4565b61006b565b610069610064610171565b6101a0565b565b6001600160a01b0381166100c65760405162461bcd60e51b815260206004820152601760248201527f5555505350726f78793a207a65726f206164647265737300000000000000000060448201526064015b60405180910390fd5b60006100f07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b0316146101465760405162461bcd60e51b815260206004820152601e60248201527f5555505350726f78793a20616c726561647920696e697469616c697a6564000060448201526064016100bd565b61016e817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b50565b600061019b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b3660008037600080366000845af43d6000803e8080156101bf573d6000f35b3d6000fd5b6000602082840312156101d657600080fd5b81356001600160a01b03811681146101ed57600080fd5b939250505056fea264697066735822122093a2bbcf49dd2895177212eeb11e9921080374fd8cd93d5be93a80935603195a64736f6c63430008130033608060405234801561001057600080fd5b50610213806100206000396000f3fe6080604052600436106100225760003560e01c80638129fc1c1461003957610031565b366100315761002f61004e565b005b61002f61004e565b34801561004557600080fd5b5061002f610060565b61005e6100596100d0565b610173565b565b7fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0546001600160a01b038116156100aa576040516305c5d81960e01b815260040160405180910390fd5b50337fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a055565b7fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0546000906001600160a01b03811661010b5761010b610197565b806001600160a01b0316639470a5b26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016d91906101ad565b91505090565b3660008037600080366000845af43d6000803e808015610192573d6000f35b3d6000fd5b634e487b7160e01b600052600160045260246000fd5b6000602082840312156101bf57600080fd5b81516001600160a01b03811681146101d657600080fd5b939250505056fea264697066735822122058d1ca205ce52a7ec995f37fb57b9e6affabeeb5d13a7fa911de8cbc8905587764736f6c63430008130033a26469706673582212201982c9a29c320a870f0d4eab0fc5884a794b4ea8f9080b69dca7d3cacf38d6c764736f6c63430008130033";

type SuperTokenFactoryStorageLayoutTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SuperTokenFactoryStorageLayoutTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SuperTokenFactoryStorageLayoutTester__factory extends ContractFactory {
  constructor(...args: SuperTokenFactoryStorageLayoutTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    host: PromiseOrValue<string>,
    superTokenLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SuperTokenFactoryStorageLayoutTester> {
    return super.deploy(
      host,
      superTokenLogic,
      overrides || {}
    ) as Promise<SuperTokenFactoryStorageLayoutTester>;
  }
  override getDeployTransaction(
    host: PromiseOrValue<string>,
    superTokenLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(host, superTokenLogic, overrides || {});
  }
  override attach(address: string): SuperTokenFactoryStorageLayoutTester {
    return super.attach(address) as SuperTokenFactoryStorageLayoutTester;
  }
  override connect(
    signer: Signer
  ): SuperTokenFactoryStorageLayoutTester__factory {
    return super.connect(
      signer
    ) as SuperTokenFactoryStorageLayoutTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SuperTokenFactoryStorageLayoutTesterInterface {
    return new utils.Interface(
      _abi
    ) as SuperTokenFactoryStorageLayoutTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SuperTokenFactoryStorageLayoutTester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SuperTokenFactoryStorageLayoutTester;
  }
}
