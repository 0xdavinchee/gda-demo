/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGeneralDistributionAgreementV1,
  IGeneralDistributionAgreementV1Interface,
} from "../../../../contracts/interfaces/agreements/IGeneralDistributionAgreementV1";

const _abi = [
  {
    inputs: [],
    name: "NOT_POOL_ADMIN",
    type: "error",
  },
  {
    inputs: [],
    name: "NO_NEGATIVE_UNITS",
    type: "error",
  },
  {
    inputs: [],
    name: "ONLY_SUPER_TOKEN_POOL",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "distributedAt",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "int96",
        name: "oldFlowRate",
        type: "int96",
      },
      {
        indexed: false,
        internalType: "int96",
        name: "newFlowRate",
        type: "int96",
      },
    ],
    name: "DistributionFlowUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "connected",
        type: "bool",
      },
    ],
    name: "PoolConnectionUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
    ],
    name: "PoolCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "settledAt",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "settledValue",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int96",
        name: "flowRate",
        type: "int96",
      },
    ],
    name: "UniversalIndexUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "agreementType",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "bool",
        name: "doConnect",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "ctx",
        type: "bytes",
      },
    ],
    name: "connectPool",
    outputs: [
      {
        internalType: "bytes",
        name: "newCtx",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
    ],
    name: "createPool",
    outputs: [
      {
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "ctx",
        type: "bytes",
      },
    ],
    name: "disconnectPool",
    outputs: [
      {
        internalType: "bytes",
        name: "newCtx",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "requestedAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "ctx",
        type: "bytes",
      },
    ],
    name: "distribute",
    outputs: [
      {
        internalType: "bytes",
        name: "newCtx",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        internalType: "contract ISuperTokenPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int96",
        name: "requestedFlowRate",
        type: "int96",
      },
      {
        internalType: "bytes",
        name: "ctx",
        type: "bytes",
      },
    ],
    name: "distributeFlow",
    outputs: [
      {
        internalType: "bytes",
        name: "newCtx",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "getFlowRate",
    outputs: [
      {
        internalType: "int96",
        name: "",
        type: "int96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getNetFlowRate",
    outputs: [
      {
        internalType: "int96",
        name: "",
        type: "int96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    name: "isMemberConnected",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISuperfluidToken",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "realtimeBalanceOf",
    outputs: [
      {
        internalType: "int256",
        name: "dynamicBalance",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "owedDeposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IGeneralDistributionAgreementV1__factory {
  static readonly abi = _abi;
  static createInterface(): IGeneralDistributionAgreementV1Interface {
    return new utils.Interface(
      _abi
    ) as IGeneralDistributionAgreementV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGeneralDistributionAgreementV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IGeneralDistributionAgreementV1;
  }
}
