// Generated by @wagmi/cli@0.1.14 on 3/31/2023 at 3:15:45 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GDAv1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gdAv1ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AGREEMENT_BASE_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'NOT_POOL_ADMIN' },
  { type: 'error', inputs: [], name: 'NO_NEGATIVE_UNITS' },
  { type: 'error', inputs: [], name: 'ONLY_SUPER_TOKEN_POOL' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'uuid',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'codeAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CodeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributedAt',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'oldFlowRate',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'newFlowRate',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'DistributionFlowUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
        indexed: true,
      },
      { name: 'connected', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PoolConnectionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'admin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'settledAt',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'settledValue',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'flowRate',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'UniversalIndexUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      {
        name: 'ps',
        internalType: 'struct BasicParticle[]',
        type: 'tuple[]',
        components: [
          { name: 'settled_at', internalType: 'Time', type: 'uint32' },
          { name: 'settled_value', internalType: 'Value', type: 'int256' },
          { name: 'flow_rate', internalType: 'FlowRate', type: 'int128' },
        ],
      },
    ],
    name: 'absorbParticlesFromPool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'agreementType',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'castrate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
      { name: 'doConnect', internalType: 'bool', type: 'bool' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'connectPool',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'connectPool',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
    ],
    name: 'createPool',
    outputs: [
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'disconnectPool',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distribute',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'to', internalType: 'contract ISuperTokenPool', type: 'address' },
      { name: 'requestedFlowRate', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distributeFlow',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'flowAddress', internalType: 'bytes32', type: 'bytes32' }],
    name: 'flowRates',
    outputs: [{ name: 'flowRate', internalType: 'FlowRate', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCodeAddress',
    outputs: [
      { name: 'codeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'contract ISuperTokenPool', type: 'address' },
      { name: 'requestedFlowRate', internalType: 'int96', type: 'int96' },
    ],
    name: 'getFlowDistributionActualFlowRate',
    outputs: [{ name: 'finalFlowRate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'getFlowRate',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getNetFlowRate',
    outputs: [{ name: 'netFlowRate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pool', internalType: 'address', type: 'address' },
      { name: 'member', internalType: 'address', type: 'address' },
    ],
    name: 'isMemberConnected',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'pool',
        internalType: 'contract ISuperTokenPool',
        type: 'address',
      },
    ],
    name: 'pools',
    outputs: [{ name: 'exists', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'rtb', internalType: 'int256', type: 'int256' },
      { name: 'dep', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'realtimeBalanceOfNow',
    outputs: [{ name: 'rtb', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceVectorAt',
    outputs: [
      { name: 'available', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newAddress', internalType: 'address', type: 'address' }],
    name: 'updateCode',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SuperToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const superTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_BURN_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_MOVE_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_LISTED_AGREEMENT' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER',
  },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_MINT_TO_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_NO_UNDERLYING_TOKEN' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_ONLY_SELF' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bondAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedBy',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmountReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'liquidationTypeData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedV2',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'slotId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementStateUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'AgreementTerminated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bailoutAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Bailout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Burned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'uuid',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'codeAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CodeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Minted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RevokedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Sent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenDowngraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'castrate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'createAgreement',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountActiveAgreements',
    outputs: [
      {
        name: '',
        internalType: 'contract ISuperAgreement[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementData',
    outputs: [{ name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementStateSlot',
    outputs: [
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCodeAddress',
    outputs: [
      { name: 'codeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getHost',
    outputs: [{ name: 'host', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountCritical',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountCriticalNow',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountSolvent',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountSolventNow',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'liquidationTypeData', internalType: 'bytes', type: 'bytes' },
      { name: 'liquidatorAccount', internalType: 'address', type: 'address' },
      { name: 'useDefaultRewardAccount', internalType: 'bool', type: 'bool' },
      { name: 'targetAccount', internalType: 'address', type: 'address' },
      { name: 'rewardAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'makeLiquidationPayoutsV2',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'realtimeBalanceOfNow',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'delta', internalType: 'int256', type: 'int256' },
    ],
    name: 'settleBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateAgreement',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementStateSlot',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'underlyingToken',
        internalType: 'contract IERC20',
        type: 'address',
      },
      { name: 'underlyingDecimals', internalType: 'uint8', type: 'uint8' },
      { name: 'n', internalType: 'string', type: 'string' },
      { name: 's', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newAddress', internalType: 'address', type: 'address' }],
    name: 'updateCode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'granularity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'send',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenHolder', internalType: 'address', type: 'address' },
    ],
    name: 'isOperatorFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'authorizeOperator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'revokeOperator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultOperators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorSend',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfApproveFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'transferAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUnderlyingToken',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'downgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'downgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationApprove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationIncreaseAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationDecreaseAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operationSend',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationUpgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationDowngrade',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Superfluid
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const superfluidABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'nonUpgradable', internalType: 'bool', type: 'bool' },
      { name: 'appWhiteListingEnabled', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '_code', internalType: 'uint256', type: 'uint256' }],
    name: 'APP_RULE',
  },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_ALREADY_REGISTERED' },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION' },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_IS_NOT_REGISTERED' },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS',
  },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS',
  },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE',
  },
  { type: 'error', inputs: [], name: 'HOST_INVALID_CONFIG_WORD' },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY',
  },
  { type: 'error', inputs: [], name: 'HOST_MAX_256_AGREEMENTS' },
  { type: 'error', inputs: [], name: 'HOST_MUST_BE_CONTRACT' },
  { type: 'error', inputs: [], name: 'HOST_NON_UPGRADEABLE' },
  { type: 'error', inputs: [], name: 'HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX' },
  { type: 'error', inputs: [], name: 'HOST_NOT_A_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_NO_APP_REGISTRATION_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'HOST_ONLY_GOVERNANCE' },
  { type: 'error', inputs: [], name: 'HOST_ONLY_LISTED_AGREEMENT' },
  { type: 'error', inputs: [], name: 'HOST_RECEIVER_IS_NOT_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_SENDER_IS_NOT_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL' },
  { type: 'error', inputs: [], name: 'HOST_SUPER_APP_ALREADY_REGISTERED' },
  { type: 'error', inputs: [], name: 'HOST_SUPER_APP_IS_JAILED' },
  { type: 'error', inputs: [], name: 'HOST_UNAUTHORIZED_SUPER_APP_FACTORY' },
  { type: 'error', inputs: [], name: 'HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgreementClassRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgreementClassUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'app',
        internalType: 'contract ISuperApp',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AppRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'uuid',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'codeAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CodeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GovernanceReplaced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'app',
        internalType: 'contract ISuperApp',
        type: 'address',
        indexed: true,
      },
      {
        name: 'reason',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Jail',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFactory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SuperTokenFactoryUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SuperTokenLogicUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'APP_WHITE_LISTING_ENABLED',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CALLBACK_GAS_LIMIT',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_APP_CALLBACK_LEVEL',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NON_UPGRADABLE_DEPLOYMENT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'castrate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCodeAddress',
    outputs: [
      { name: 'codeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'gov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newAddress', internalType: 'address', type: 'address' }],
    name: 'updateCode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNow',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGovernance',
    outputs: [
      {
        name: '',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
      },
    ],
    name: 'replaceGovernance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClassLogic',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'registerAgreementClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClassLogic',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'updateAgreementClass',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isAgreementTypeListed',
    outputs: [{ name: 'yes', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'isAgreementClassListed',
    outputs: [{ name: 'yes', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getAgreementClass',
    outputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'bitmap', internalType: 'uint256', type: 'uint256' }],
    name: 'mapAgreementClasses',
    outputs: [
      {
        name: 'agreementClasses',
        internalType: 'contract ISuperAgreement[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'bitmap', internalType: 'uint256', type: 'uint256' },
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'addToAgreementClassesBitmap',
    outputs: [{ name: 'newBitmap', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'bitmap', internalType: 'uint256', type: 'uint256' },
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeFromAgreementClassesBitmap',
    outputs: [{ name: 'newBitmap', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSuperTokenFactory',
    outputs: [
      {
        name: 'factory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSuperTokenFactoryLogic',
    outputs: [{ name: 'logic', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newFactory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
      },
    ],
    name: 'updateSuperTokenFactory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
    ],
    name: 'updateSuperTokenLogic',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'configWord', internalType: 'uint256', type: 'uint256' }],
    name: 'registerApp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'configWord', internalType: 'uint256', type: 'uint256' },
      { name: 'registrationKey', internalType: 'string', type: 'string' },
    ],
    name: 'registerAppWithKey',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'configWord', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'registerAppByFactory',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'isApp',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'appAddr', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'getAppCallbackLevel',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'getAppManifest',
    outputs: [
      { name: 'isSuperApp', internalType: 'bool', type: 'bool' },
      { name: 'isJailed', internalType: 'bool', type: 'bool' },
      { name: 'noopMask', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'isAppJailed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'targetApp',
        internalType: 'contract ISuperApp',
        type: 'address',
      },
    ],
    name: 'allowCompositeApp',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      {
        name: 'targetApp',
        internalType: 'contract ISuperApp',
        type: 'address',
      },
    ],
    name: 'isCompositeAppAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'isTermination', internalType: 'bool', type: 'bool' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppBeforeCallback',
    outputs: [{ name: 'cbdata', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'isTermination', internalType: 'bool', type: 'bool' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppAfterCallback',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'appCreditGranted', internalType: 'uint256', type: 'uint256' },
      { name: 'appCreditUsed', internalType: 'int256', type: 'int256' },
      {
        name: 'appCreditToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
    ],
    name: 'appCallbackPush',
    outputs: [{ name: 'appCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'appCreditUsedDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'appCallbackPop',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'appCreditUsedMore', internalType: 'int256', type: 'int256' },
    ],
    name: 'ctxUseCredit',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'reason', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'jailApp',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAgreement',
    outputs: [{ name: 'returnedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppAction',
    outputs: [{ name: 'returnedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAgreementWithContext',
    outputs: [
      { name: 'newCtx', internalType: 'bytes', type: 'bytes' },
      { name: 'returnedData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppActionWithContext',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ctx', internalType: 'bytes', type: 'bytes' }],
    name: 'decodeCtx',
    outputs: [
      {
        name: 'context',
        internalType: 'struct ISuperfluid.Context',
        type: 'tuple',
        components: [
          { name: 'appCallbackLevel', internalType: 'uint8', type: 'uint8' },
          { name: 'callType', internalType: 'uint8', type: 'uint8' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'msgSender', internalType: 'address', type: 'address' },
          { name: 'agreementSelector', internalType: 'bytes4', type: 'bytes4' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          {
            name: 'appCreditGranted',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'appCreditWantedDeprecated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'appCreditUsed', internalType: 'int256', type: 'int256' },
          { name: 'appAddress', internalType: 'address', type: 'address' },
          {
            name: 'appCreditToken',
            internalType: 'contract ISuperfluidToken',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ctx', internalType: 'bytes', type: 'bytes' }],
    name: 'isCtxValid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'operations',
        internalType: 'struct ISuperfluid.Operation[]',
        type: 'tuple[]',
        components: [
          { name: 'operationType', internalType: 'uint32', type: 'uint32' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'batchCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'operations',
        internalType: 'struct ISuperfluid.Operation[]',
        type: 'tuple[]',
        components: [
          { name: 'operationType', internalType: 'uint32', type: 'uint32' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'forwardBatchCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'versionRecipient',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETHProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sethProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenDowngraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenUpgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialAddress', internalType: 'address', type: 'address' },
    ],
    name: 'initializeProxy',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'upgradeByETH',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'upgradeByETHTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'wad', internalType: 'uint256', type: 'uint256' }],
    name: 'downgradeToETH',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SuperTokenPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const superTokenPoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'admin_', internalType: 'address', type: 'address' },
      {
        name: 'gda',
        internalType: 'contract GeneralDistributionAgreementV1',
        type: 'address',
      },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
    ],
  },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_POOL_NEGATIVE_UNITS_NOT_SUPPORTED',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_POOL_NOT_POOL_ADMIN' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalUnits',
        internalType: 'int128',
        type: 'int128',
        indexed: false,
      },
      {
        name: 'wpSettledAt',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'wpSettledValue',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'wpFlowRate',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'PoolIndexUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_superToken',
    outputs: [
      { name: '', internalType: 'contract ISuperfluidToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'admin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingUnits',
    outputs: [{ name: '', internalType: 'Unit', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getIndex',
    outputs: [
      {
        name: '',
        internalType: 'struct PDPoolIndex',
        type: 'tuple',
        components: [
          { name: 'total_units', internalType: 'Unit', type: 'int128' },
          {
            name: 'wrapped_particle',
            internalType: 'struct BasicParticle',
            type: 'tuple',
            components: [
              { name: 'settled_at', internalType: 'Time', type: 'uint32' },
              { name: 'settled_value', internalType: 'Value', type: 'int256' },
              { name: 'flow_rate', internalType: 'FlowRate', type: 'int128' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalUnits',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'memberAddr', internalType: 'address', type: 'address' }],
    name: 'getUnits',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDistributionFlowRate',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPendingDistributionFlowRate',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'memberAddr', internalType: 'address', type: 'address' }],
    name: 'getMemberFlowRate',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPendingDistribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'memberAddr', internalType: 'address', type: 'address' }],
    name: 'getClaimableNow',
    outputs: [
      { name: 'claimableBalance', internalType: 'int256', type: 'int256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'time', internalType: 'uint32', type: 'uint32' },
      { name: 'memberAddr', internalType: 'address', type: 'address' },
    ],
    name: 'getClaimable',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'memberAddr', internalType: 'address', type: 'address' },
      { name: 'unit', internalType: 'int128', type: 'int128' },
    ],
    name: 'updateMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'time', internalType: 'uint32', type: 'uint32' },
      { name: 'memberAddr', internalType: 'address', type: 'address' },
    ],
    name: 'claimAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'memberAddr', internalType: 'address', type: 'address' }],
    name: 'claimAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'index',
        internalType: 'struct PDPoolIndex',
        type: 'tuple',
        components: [
          { name: 'total_units', internalType: 'Unit', type: 'int128' },
          {
            name: 'wrapped_particle',
            internalType: 'struct BasicParticle',
            type: 'tuple',
            components: [
              { name: 'settled_at', internalType: 'Time', type: 'uint32' },
              { name: 'settled_value', internalType: 'Value', type: 'int256' },
              { name: 'flow_rate', internalType: 'FlowRate', type: 'int128' },
            ],
          },
        ],
      },
    ],
    name: 'operatorSetIndex',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'time', internalType: 'uint32', type: 'uint32' },
      { name: 'memberAddr', internalType: 'address', type: 'address' },
      { name: 'doConnect', internalType: 'bool', type: 'bool' },
    ],
    name: 'operatorConnectMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link gdAv1ABI}__.
 */
export function useGdAv1(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: gdAv1ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__.
 */
export function useGdAv1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gdAv1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: gdAv1ABI, ...config } as UseContractReadConfig<
    typeof gdAv1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"agreementType"`.
 */
export function useGdAv1AgreementType<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'agreementType'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'agreementType', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'agreementType',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'agreementType', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"flowRates"`.
 */
export function useGdAv1FlowRates<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'flowRates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'flowRates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'flowRates',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'flowRates', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"getCodeAddress"`.
 */
export function useGdAv1GetCodeAddress<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'getCodeAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'getCodeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'getCodeAddress',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'getCodeAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"getFlowDistributionActualFlowRate"`.
 */
export function useGdAv1GetFlowDistributionActualFlowRate<
  TSelectData = ReadContractResult<
    typeof gdAv1ABI,
    'getFlowDistributionActualFlowRate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gdAv1ABI,
      'getFlowDistributionActualFlowRate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'getFlowDistributionActualFlowRate',
    ...config,
  } as UseContractReadConfig<
    typeof gdAv1ABI,
    'getFlowDistributionActualFlowRate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"getFlowRate"`.
 */
export function useGdAv1GetFlowRate<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'getFlowRate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'getFlowRate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'getFlowRate',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'getFlowRate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"getNetFlowRate"`.
 */
export function useGdAv1GetNetFlowRate<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'getNetFlowRate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'getNetFlowRate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'getNetFlowRate',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'getNetFlowRate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"isMemberConnected"`.
 */
export function useGdAv1IsMemberConnected<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'isMemberConnected'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'isMemberConnected', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'isMemberConnected',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'isMemberConnected', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"pools"`.
 */
export function useGdAv1Pools<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'pools'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'pools', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'pools',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'pools', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useGdAv1ProxiableUuid<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'proxiableUUID', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useGdAv1RealtimeBalanceOf<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'realtimeBalanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'realtimeBalanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<typeof gdAv1ABI, 'realtimeBalanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"realtimeBalanceOfNow"`.
 */
export function useGdAv1RealtimeBalanceOfNow<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'realtimeBalanceOfNow'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gdAv1ABI, 'realtimeBalanceOfNow', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'realtimeBalanceOfNow',
    ...config,
  } as UseContractReadConfig<
    typeof gdAv1ABI,
    'realtimeBalanceOfNow',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"realtimeBalanceVectorAt"`.
 */
export function useGdAv1RealtimeBalanceVectorAt<
  TSelectData = ReadContractResult<typeof gdAv1ABI, 'realtimeBalanceVectorAt'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gdAv1ABI,
      'realtimeBalanceVectorAt',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gdAv1ABI,
    functionName: 'realtimeBalanceVectorAt',
    ...config,
  } as UseContractReadConfig<
    typeof gdAv1ABI,
    'realtimeBalanceVectorAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__.
 */
export function useGdAv1Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, TFunctionName>({
    abi: gdAv1ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"absorbParticlesFromPool"`.
 */
export function useGdAv1AbsorbParticlesFromPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof gdAv1ABI,
          'absorbParticlesFromPool'
        >['abi'],
        'absorbParticlesFromPool'
      > & { functionName?: 'absorbParticlesFromPool' }
    : UseContractWriteConfig<
        TMode,
        typeof gdAv1ABI,
        'absorbParticlesFromPool'
      > & {
        abi?: never
        functionName?: 'absorbParticlesFromPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'absorbParticlesFromPool'>({
    abi: gdAv1ABI,
    functionName: 'absorbParticlesFromPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"castrate"`.
 */
export function useGdAv1Castrate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'castrate'>['abi'],
        'castrate'
      > & { functionName?: 'castrate' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'castrate'> & {
        abi?: never
        functionName?: 'castrate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'castrate'>({
    abi: gdAv1ABI,
    functionName: 'castrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"connectPool"`.
 */
export function useGdAv1ConnectPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'connectPool'>['abi'],
        'connectPool'
      > & { functionName?: 'connectPool' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'connectPool'> & {
        abi?: never
        functionName?: 'connectPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'connectPool'>({
    abi: gdAv1ABI,
    functionName: 'connectPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"createPool"`.
 */
export function useGdAv1CreatePool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'createPool'>['abi'],
        'createPool'
      > & { functionName?: 'createPool' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'createPool'> & {
        abi?: never
        functionName?: 'createPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'createPool'>({
    abi: gdAv1ABI,
    functionName: 'createPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"disconnectPool"`.
 */
export function useGdAv1DisconnectPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'disconnectPool'>['abi'],
        'disconnectPool'
      > & { functionName?: 'disconnectPool' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'disconnectPool'> & {
        abi?: never
        functionName?: 'disconnectPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'disconnectPool'>({
    abi: gdAv1ABI,
    functionName: 'disconnectPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"distribute"`.
 */
export function useGdAv1Distribute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'distribute'>['abi'],
        'distribute'
      > & { functionName?: 'distribute' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'distribute'> & {
        abi?: never
        functionName?: 'distribute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'distribute'>({
    abi: gdAv1ABI,
    functionName: 'distribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"distributeFlow"`.
 */
export function useGdAv1DistributeFlow<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'distributeFlow'>['abi'],
        'distributeFlow'
      > & { functionName?: 'distributeFlow' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'distributeFlow'> & {
        abi?: never
        functionName?: 'distributeFlow'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'distributeFlow'>({
    abi: gdAv1ABI,
    functionName: 'distributeFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"updateCode"`.
 */
export function useGdAv1UpdateCode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gdAv1ABI, 'updateCode'>['abi'],
        'updateCode'
      > & { functionName?: 'updateCode' }
    : UseContractWriteConfig<TMode, typeof gdAv1ABI, 'updateCode'> & {
        abi?: never
        functionName?: 'updateCode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gdAv1ABI, 'updateCode'>({
    abi: gdAv1ABI,
    functionName: 'updateCode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__.
 */
export function usePrepareGdAv1Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"absorbParticlesFromPool"`.
 */
export function usePrepareGdAv1AbsorbParticlesFromPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'absorbParticlesFromPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'absorbParticlesFromPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof gdAv1ABI,
    'absorbParticlesFromPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"castrate"`.
 */
export function usePrepareGdAv1Castrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'castrate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'castrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'castrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"connectPool"`.
 */
export function usePrepareGdAv1ConnectPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'connectPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'connectPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'connectPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"createPool"`.
 */
export function usePrepareGdAv1CreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'createPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'createPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"disconnectPool"`.
 */
export function usePrepareGdAv1DisconnectPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'disconnectPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'disconnectPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'disconnectPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"distribute"`.
 */
export function usePrepareGdAv1Distribute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'distribute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'distribute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'distribute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"distributeFlow"`.
 */
export function usePrepareGdAv1DistributeFlow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'distributeFlow'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'distributeFlow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'distributeFlow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gdAv1ABI}__ and `functionName` set to `"updateCode"`.
 */
export function usePrepareGdAv1UpdateCode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gdAv1ABI, 'updateCode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gdAv1ABI,
    functionName: 'updateCode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gdAv1ABI, 'updateCode'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__.
 */
export function useGdAv1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"CodeUpdated"`.
 */
export function useGdAv1CodeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'CodeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'CodeUpdated',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'CodeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"DistributionFlowUpdated"`.
 */
export function useGdAv1DistributionFlowUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'DistributionFlowUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'DistributionFlowUpdated',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'DistributionFlowUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useGdAv1InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"PoolConnectionUpdated"`.
 */
export function useGdAv1PoolConnectionUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'PoolConnectionUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'PoolConnectionUpdated',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'PoolConnectionUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"PoolCreated"`.
 */
export function useGdAv1PoolCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'PoolCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'PoolCreated',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'PoolCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gdAv1ABI}__ and `eventName` set to `"UniversalIndexUpdated"`.
 */
export function useGdAv1UniversalIndexUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gdAv1ABI, 'UniversalIndexUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gdAv1ABI,
    eventName: 'UniversalIndexUpdated',
    ...config,
  } as UseContractEventConfig<typeof gdAv1ABI, 'UniversalIndexUpdated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link superTokenABI}__.
 */
export function useSuperToken(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: superTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__.
 */
export function useSuperTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof superTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getAccountActiveAgreements"`.
 */
export function useSuperTokenGetAccountActiveAgreements<
  TSelectData = ReadContractResult<
    typeof superTokenABI,
    'getAccountActiveAgreements'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'getAccountActiveAgreements',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getAccountActiveAgreements',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'getAccountActiveAgreements',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getAgreementData"`.
 */
export function useSuperTokenGetAgreementData<
  TSelectData = ReadContractResult<typeof superTokenABI, 'getAgreementData'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'getAgreementData',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getAgreementData',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'getAgreementData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getAgreementStateSlot"`.
 */
export function useSuperTokenGetAgreementStateSlot<
  TSelectData = ReadContractResult<
    typeof superTokenABI,
    'getAgreementStateSlot'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'getAgreementStateSlot',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getAgreementStateSlot',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'getAgreementStateSlot',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getCodeAddress"`.
 */
export function useSuperTokenGetCodeAddress<
  TSelectData = ReadContractResult<typeof superTokenABI, 'getCodeAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'getCodeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getCodeAddress',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'getCodeAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getHost"`.
 */
export function useSuperTokenGetHost<
  TSelectData = ReadContractResult<typeof superTokenABI, 'getHost'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'getHost', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getHost',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'getHost', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"isAccountCritical"`.
 */
export function useSuperTokenIsAccountCritical<
  TSelectData = ReadContractResult<typeof superTokenABI, 'isAccountCritical'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'isAccountCritical',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'isAccountCritical',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'isAccountCritical',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"isAccountCriticalNow"`.
 */
export function useSuperTokenIsAccountCriticalNow<
  TSelectData = ReadContractResult<
    typeof superTokenABI,
    'isAccountCriticalNow'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'isAccountCriticalNow',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'isAccountCriticalNow',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'isAccountCriticalNow',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"isAccountSolvent"`.
 */
export function useSuperTokenIsAccountSolvent<
  TSelectData = ReadContractResult<typeof superTokenABI, 'isAccountSolvent'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'isAccountSolvent',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'isAccountSolvent',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'isAccountSolvent',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"isAccountSolventNow"`.
 */
export function useSuperTokenIsAccountSolventNow<
  TSelectData = ReadContractResult<typeof superTokenABI, 'isAccountSolventNow'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'isAccountSolventNow',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'isAccountSolventNow',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'isAccountSolventNow',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useSuperTokenRealtimeBalanceOf<
  TSelectData = ReadContractResult<typeof superTokenABI, 'realtimeBalanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'realtimeBalanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'realtimeBalanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"realtimeBalanceOfNow"`.
 */
export function useSuperTokenRealtimeBalanceOfNow<
  TSelectData = ReadContractResult<
    typeof superTokenABI,
    'realtimeBalanceOfNow'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'realtimeBalanceOfNow',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'realtimeBalanceOfNow',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'realtimeBalanceOfNow',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSuperTokenProxiableUuid<
  TSelectData = ReadContractResult<typeof superTokenABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"name"`.
 */
export function useSuperTokenName<
  TSelectData = ReadContractResult<typeof superTokenABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useSuperTokenSymbol<
  TSelectData = ReadContractResult<typeof superTokenABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useSuperTokenDecimals<
  TSelectData = ReadContractResult<typeof superTokenABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSuperTokenTotalSupply<
  TSelectData = ReadContractResult<typeof superTokenABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSuperTokenBalanceOf<
  TSelectData = ReadContractResult<typeof superTokenABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useSuperTokenAllowance<
  TSelectData = ReadContractResult<typeof superTokenABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"granularity"`.
 */
export function useSuperTokenGranularity<
  TSelectData = ReadContractResult<typeof superTokenABI, 'granularity'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'granularity', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'granularity',
    ...config,
  } as UseContractReadConfig<typeof superTokenABI, 'granularity', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"isOperatorFor"`.
 */
export function useSuperTokenIsOperatorFor<
  TSelectData = ReadContractResult<typeof superTokenABI, 'isOperatorFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenABI, 'isOperatorFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'isOperatorFor',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'isOperatorFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"defaultOperators"`.
 */
export function useSuperTokenDefaultOperators<
  TSelectData = ReadContractResult<typeof superTokenABI, 'defaultOperators'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'defaultOperators',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'defaultOperators',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'defaultOperators',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"getUnderlyingToken"`.
 */
export function useSuperTokenGetUnderlyingToken<
  TSelectData = ReadContractResult<typeof superTokenABI, 'getUnderlyingToken'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenABI,
      'getUnderlyingToken',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenABI,
    functionName: 'getUnderlyingToken',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenABI,
    'getUnderlyingToken',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__.
 */
export function useSuperTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof superTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, TFunctionName>({
    abi: superTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"castrate"`.
 */
export function useSuperTokenCastrate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'castrate'>['abi'],
        'castrate'
      > & { functionName?: 'castrate' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'castrate'> & {
        abi?: never
        functionName?: 'castrate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'castrate'>({
    abi: superTokenABI,
    functionName: 'castrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function useSuperTokenCreateAgreement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'createAgreement'
        >['abi'],
        'createAgreement'
      > & { functionName?: 'createAgreement' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'createAgreement'> & {
        abi?: never
        functionName?: 'createAgreement'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'createAgreement'>({
    abi: superTokenABI,
    functionName: 'createAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function useSuperTokenMakeLiquidationPayoutsV2<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'makeLiquidationPayoutsV2'
        >['abi'],
        'makeLiquidationPayoutsV2'
      > & { functionName?: 'makeLiquidationPayoutsV2' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'makeLiquidationPayoutsV2'
      > & {
        abi?: never
        functionName?: 'makeLiquidationPayoutsV2'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superTokenABI,
    'makeLiquidationPayoutsV2'
  >({
    abi: superTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function useSuperTokenSettleBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'settleBalance'
        >['abi'],
        'settleBalance'
      > & { functionName?: 'settleBalance' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'settleBalance'> & {
        abi?: never
        functionName?: 'settleBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'settleBalance'>({
    abi: superTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function useSuperTokenTerminateAgreement<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'terminateAgreement'
        >['abi'],
        'terminateAgreement'
      > & { functionName?: 'terminateAgreement' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'terminateAgreement'
      > & {
        abi?: never
        functionName?: 'terminateAgreement'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'terminateAgreement'>({
    abi: superTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function useSuperTokenUpdateAgreementData<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'updateAgreementData'
        >['abi'],
        'updateAgreementData'
      > & { functionName?: 'updateAgreementData' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'updateAgreementData'
      > & {
        abi?: never
        functionName?: 'updateAgreementData'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'updateAgreementData'>({
    abi: superTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function useSuperTokenUpdateAgreementStateSlot<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'updateAgreementStateSlot'
        >['abi'],
        'updateAgreementStateSlot'
      > & { functionName?: 'updateAgreementStateSlot' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'updateAgreementStateSlot'
      > & {
        abi?: never
        functionName?: 'updateAgreementStateSlot'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superTokenABI,
    'updateAgreementStateSlot'
  >({
    abi: superTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useSuperTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'initialize'>({
    abi: superTokenABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateCode"`.
 */
export function useSuperTokenUpdateCode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'updateCode'>['abi'],
        'updateCode'
      > & { functionName?: 'updateCode' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'updateCode'> & {
        abi?: never
        functionName?: 'updateCode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'updateCode'>({
    abi: superTokenABI,
    functionName: 'updateCode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useSuperTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'transfer'>({
    abi: superTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useSuperTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'approve'>({
    abi: superTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSuperTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'transferFrom'>({
    abi: superTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSuperTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'increaseAllowance'>({
    abi: superTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSuperTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'decreaseAllowance'>({
    abi: superTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"send"`.
 */
export function useSuperTokenSend<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'send'>['abi'],
        'send'
      > & { functionName?: 'send' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'send'> & {
        abi?: never
        functionName?: 'send'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'send'>({
    abi: superTokenABI,
    functionName: 'send',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useSuperTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'burn'>({
    abi: superTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function useSuperTokenAuthorizeOperator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'authorizeOperator'
        >['abi'],
        'authorizeOperator'
      > & { functionName?: 'authorizeOperator' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'authorizeOperator'
      > & {
        abi?: never
        functionName?: 'authorizeOperator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'authorizeOperator'>({
    abi: superTokenABI,
    functionName: 'authorizeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function useSuperTokenRevokeOperator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'revokeOperator'
        >['abi'],
        'revokeOperator'
      > & { functionName?: 'revokeOperator' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'revokeOperator'> & {
        abi?: never
        functionName?: 'revokeOperator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'revokeOperator'>({
    abi: superTokenABI,
    functionName: 'revokeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operatorSend"`.
 */
export function useSuperTokenOperatorSend<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'operatorSend'>['abi'],
        'operatorSend'
      > & { functionName?: 'operatorSend' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'operatorSend'> & {
        abi?: never
        functionName?: 'operatorSend'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operatorSend'>({
    abi: superTokenABI,
    functionName: 'operatorSend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function useSuperTokenOperatorBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'operatorBurn'>['abi'],
        'operatorBurn'
      > & { functionName?: 'operatorBurn' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'operatorBurn'> & {
        abi?: never
        functionName?: 'operatorBurn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operatorBurn'>({
    abi: superTokenABI,
    functionName: 'operatorBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfMint"`.
 */
export function useSuperTokenSelfMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'selfMint'>['abi'],
        'selfMint'
      > & { functionName?: 'selfMint' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'selfMint'> & {
        abi?: never
        functionName?: 'selfMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'selfMint'>({
    abi: superTokenABI,
    functionName: 'selfMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfBurn"`.
 */
export function useSuperTokenSelfBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'selfBurn'>['abi'],
        'selfBurn'
      > & { functionName?: 'selfBurn' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'selfBurn'> & {
        abi?: never
        functionName?: 'selfBurn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'selfBurn'>({
    abi: superTokenABI,
    functionName: 'selfBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfApproveFor"`.
 */
export function useSuperTokenSelfApproveFor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'selfApproveFor'
        >['abi'],
        'selfApproveFor'
      > & { functionName?: 'selfApproveFor' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'selfApproveFor'> & {
        abi?: never
        functionName?: 'selfApproveFor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'selfApproveFor'>({
    abi: superTokenABI,
    functionName: 'selfApproveFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfTransferFrom"`.
 */
export function useSuperTokenSelfTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'selfTransferFrom'
        >['abi'],
        'selfTransferFrom'
      > & { functionName?: 'selfTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'selfTransferFrom'
      > & {
        abi?: never
        functionName?: 'selfTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'selfTransferFrom'>({
    abi: superTokenABI,
    functionName: 'selfTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transferAll"`.
 */
export function useSuperTokenTransferAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'transferAll'>['abi'],
        'transferAll'
      > & { functionName?: 'transferAll' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'transferAll'> & {
        abi?: never
        functionName?: 'transferAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'transferAll'>({
    abi: superTokenABI,
    functionName: 'transferAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"upgrade"`.
 */
export function useSuperTokenUpgrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'upgrade'>['abi'],
        'upgrade'
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'upgrade'> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'upgrade'>({
    abi: superTokenABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSuperTokenUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'upgradeTo'>['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'upgradeTo'>({
    abi: superTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"downgrade"`.
 */
export function useSuperTokenDowngrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'downgrade'>['abi'],
        'downgrade'
      > & { functionName?: 'downgrade' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'downgrade'> & {
        abi?: never
        functionName?: 'downgrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'downgrade'>({
    abi: superTokenABI,
    functionName: 'downgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"downgradeTo"`.
 */
export function useSuperTokenDowngradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenABI, 'downgradeTo'>['abi'],
        'downgradeTo'
      > & { functionName?: 'downgradeTo' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'downgradeTo'> & {
        abi?: never
        functionName?: 'downgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'downgradeTo'>({
    abi: superTokenABI,
    functionName: 'downgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationApprove"`.
 */
export function useSuperTokenOperationApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationApprove'
        >['abi'],
        'operationApprove'
      > & { functionName?: 'operationApprove' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationApprove'
      > & {
        abi?: never
        functionName?: 'operationApprove'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operationApprove'>({
    abi: superTokenABI,
    functionName: 'operationApprove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationIncreaseAllowance"`.
 */
export function useSuperTokenOperationIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationIncreaseAllowance'
        >['abi'],
        'operationIncreaseAllowance'
      > & { functionName?: 'operationIncreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationIncreaseAllowance'
      > & {
        abi?: never
        functionName?: 'operationIncreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superTokenABI,
    'operationIncreaseAllowance'
  >({
    abi: superTokenABI,
    functionName: 'operationIncreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationDecreaseAllowance"`.
 */
export function useSuperTokenOperationDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationDecreaseAllowance'
        >['abi'],
        'operationDecreaseAllowance'
      > & { functionName?: 'operationDecreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationDecreaseAllowance'
      > & {
        abi?: never
        functionName?: 'operationDecreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superTokenABI,
    'operationDecreaseAllowance'
  >({
    abi: superTokenABI,
    functionName: 'operationDecreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationTransferFrom"`.
 */
export function useSuperTokenOperationTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationTransferFrom'
        >['abi'],
        'operationTransferFrom'
      > & { functionName?: 'operationTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationTransferFrom'
      > & {
        abi?: never
        functionName?: 'operationTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operationTransferFrom'>(
    {
      abi: superTokenABI,
      functionName: 'operationTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationSend"`.
 */
export function useSuperTokenOperationSend<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationSend'
        >['abi'],
        'operationSend'
      > & { functionName?: 'operationSend' }
    : UseContractWriteConfig<TMode, typeof superTokenABI, 'operationSend'> & {
        abi?: never
        functionName?: 'operationSend'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operationSend'>({
    abi: superTokenABI,
    functionName: 'operationSend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationUpgrade"`.
 */
export function useSuperTokenOperationUpgrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationUpgrade'
        >['abi'],
        'operationUpgrade'
      > & { functionName?: 'operationUpgrade' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationUpgrade'
      > & {
        abi?: never
        functionName?: 'operationUpgrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operationUpgrade'>({
    abi: superTokenABI,
    functionName: 'operationUpgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationDowngrade"`.
 */
export function useSuperTokenOperationDowngrade<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenABI,
          'operationDowngrade'
        >['abi'],
        'operationDowngrade'
      > & { functionName?: 'operationDowngrade' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenABI,
        'operationDowngrade'
      > & {
        abi?: never
        functionName?: 'operationDowngrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenABI, 'operationDowngrade'>({
    abi: superTokenABI,
    functionName: 'operationDowngrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__.
 */
export function usePrepareSuperTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"castrate"`.
 */
export function usePrepareSuperTokenCastrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'castrate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'castrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'castrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function usePrepareSuperTokenCreateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'createAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'createAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'createAgreement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function usePrepareSuperTokenMakeLiquidationPayoutsV2(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenABI,
      'makeLiquidationPayoutsV2'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'makeLiquidationPayoutsV2'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function usePrepareSuperTokenSettleBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'settleBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'settleBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function usePrepareSuperTokenTerminateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'terminateAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'terminateAgreement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function usePrepareSuperTokenUpdateAgreementData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'updateAgreementData'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'updateAgreementData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function usePrepareSuperTokenUpdateAgreementStateSlot(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenABI,
      'updateAgreementStateSlot'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'updateAgreementStateSlot'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSuperTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"updateCode"`.
 */
export function usePrepareSuperTokenUpdateCode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'updateCode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'updateCode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'updateCode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSuperTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSuperTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSuperTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSuperTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSuperTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"send"`.
 */
export function usePrepareSuperTokenSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'send'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'send',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'send'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSuperTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function usePrepareSuperTokenAuthorizeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'authorizeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'authorizeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'authorizeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function usePrepareSuperTokenRevokeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'revokeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'revokeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'revokeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operatorSend"`.
 */
export function usePrepareSuperTokenOperatorSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operatorSend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operatorSend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'operatorSend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function usePrepareSuperTokenOperatorBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operatorBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operatorBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'operatorBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfMint"`.
 */
export function usePrepareSuperTokenSelfMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'selfMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'selfMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'selfMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfBurn"`.
 */
export function usePrepareSuperTokenSelfBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'selfBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'selfBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'selfBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfApproveFor"`.
 */
export function usePrepareSuperTokenSelfApproveFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'selfApproveFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'selfApproveFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'selfApproveFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"selfTransferFrom"`.
 */
export function usePrepareSuperTokenSelfTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'selfTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'selfTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'selfTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"transferAll"`.
 */
export function usePrepareSuperTokenTransferAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'transferAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'transferAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'transferAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareSuperTokenUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSuperTokenUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"downgrade"`.
 */
export function usePrepareSuperTokenDowngrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'downgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'downgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'downgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"downgradeTo"`.
 */
export function usePrepareSuperTokenDowngradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'downgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'downgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'downgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationApprove"`.
 */
export function usePrepareSuperTokenOperationApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operationApprove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationApprove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'operationApprove'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationIncreaseAllowance"`.
 */
export function usePrepareSuperTokenOperationIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenABI,
      'operationIncreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationIncreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'operationIncreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationDecreaseAllowance"`.
 */
export function usePrepareSuperTokenOperationDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenABI,
      'operationDecreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationDecreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'operationDecreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationTransferFrom"`.
 */
export function usePrepareSuperTokenOperationTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenABI,
      'operationTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'operationTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationSend"`.
 */
export function usePrepareSuperTokenOperationSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operationSend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationSend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'operationSend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationUpgrade"`.
 */
export function usePrepareSuperTokenOperationUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operationUpgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationUpgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenABI, 'operationUpgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenABI}__ and `functionName` set to `"operationDowngrade"`.
 */
export function usePrepareSuperTokenOperationDowngrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenABI, 'operationDowngrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenABI,
    functionName: 'operationDowngrade',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenABI,
    'operationDowngrade'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__.
 */
export function useSuperTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementCreated"`.
 */
export function useSuperTokenAgreementCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementCreated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementLiquidated"`.
 */
export function useSuperTokenAgreementLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementLiquidated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementLiquidatedBy"`.
 */
export function useSuperTokenAgreementLiquidatedByEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidatedBy'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementLiquidatedBy',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidatedBy'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementLiquidatedV2"`.
 */
export function useSuperTokenAgreementLiquidatedV2Event(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidatedV2'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementLiquidatedV2',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementLiquidatedV2'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementStateUpdated"`.
 */
export function useSuperTokenAgreementStateUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementStateUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementStateUpdated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementStateUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementTerminated"`.
 */
export function useSuperTokenAgreementTerminatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementTerminated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementTerminated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementTerminated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AgreementUpdated"`.
 */
export function useSuperTokenAgreementUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AgreementUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AgreementUpdated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AgreementUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useSuperTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"AuthorizedOperator"`.
 */
export function useSuperTokenAuthorizedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'AuthorizedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'AuthorizedOperator',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'AuthorizedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Bailout"`.
 */
export function useSuperTokenBailoutEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Bailout'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Bailout',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Bailout'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Burned"`.
 */
export function useSuperTokenBurnedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Burned'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Burned',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Burned'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"CodeUpdated"`.
 */
export function useSuperTokenCodeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'CodeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'CodeUpdated',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'CodeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSuperTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Minted"`.
 */
export function useSuperTokenMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Minted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Minted',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Minted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"RevokedOperator"`.
 */
export function useSuperTokenRevokedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'RevokedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'RevokedOperator',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'RevokedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Sent"`.
 */
export function useSuperTokenSentEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Sent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Sent',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Sent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"TokenDowngraded"`.
 */
export function useSuperTokenTokenDowngradedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'TokenDowngraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'TokenDowngraded',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'TokenDowngraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"TokenUpgraded"`.
 */
export function useSuperTokenTokenUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'TokenUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'TokenUpgraded',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'TokenUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSuperTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof superTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link superfluidABI}__.
 */
export function useSuperfluid(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: superfluidABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__.
 */
export function useSuperfluidRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof superfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"APP_WHITE_LISTING_ENABLED"`.
 */
export function useSuperfluidAppWhiteListingEnabled<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'APP_WHITE_LISTING_ENABLED'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'APP_WHITE_LISTING_ENABLED',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'APP_WHITE_LISTING_ENABLED',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'APP_WHITE_LISTING_ENABLED',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"CALLBACK_GAS_LIMIT"`.
 */
export function useSuperfluidCallbackGasLimit<
  TSelectData = ReadContractResult<typeof superfluidABI, 'CALLBACK_GAS_LIMIT'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'CALLBACK_GAS_LIMIT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'CALLBACK_GAS_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'CALLBACK_GAS_LIMIT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"MAX_APP_CALLBACK_LEVEL"`.
 */
export function useSuperfluidMaxAppCallbackLevel<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'MAX_APP_CALLBACK_LEVEL'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'MAX_APP_CALLBACK_LEVEL',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'MAX_APP_CALLBACK_LEVEL',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'MAX_APP_CALLBACK_LEVEL',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"NON_UPGRADABLE_DEPLOYMENT"`.
 */
export function useSuperfluidNonUpgradableDeployment<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'NON_UPGRADABLE_DEPLOYMENT'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'NON_UPGRADABLE_DEPLOYMENT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'NON_UPGRADABLE_DEPLOYMENT',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'NON_UPGRADABLE_DEPLOYMENT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getCodeAddress"`.
 */
export function useSuperfluidGetCodeAddress<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getCodeAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'getCodeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getCodeAddress',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getCodeAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSuperfluidProxiableUuid<
  TSelectData = ReadContractResult<typeof superfluidABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getNow"`.
 */
export function useSuperfluidGetNow<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getNow'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'getNow', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getNow',
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, 'getNow', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getGovernance"`.
 */
export function useSuperfluidGetGovernance<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getGovernance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'getGovernance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getGovernance',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getGovernance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isAgreementTypeListed"`.
 */
export function useSuperfluidIsAgreementTypeListed<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'isAgreementTypeListed'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'isAgreementTypeListed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isAgreementTypeListed',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'isAgreementTypeListed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isAgreementClassListed"`.
 */
export function useSuperfluidIsAgreementClassListed<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'isAgreementClassListed'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'isAgreementClassListed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isAgreementClassListed',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'isAgreementClassListed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getAgreementClass"`.
 */
export function useSuperfluidGetAgreementClass<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getAgreementClass'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'getAgreementClass',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getAgreementClass',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getAgreementClass',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"mapAgreementClasses"`.
 */
export function useSuperfluidMapAgreementClasses<
  TSelectData = ReadContractResult<typeof superfluidABI, 'mapAgreementClasses'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'mapAgreementClasses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'mapAgreementClasses',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'mapAgreementClasses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"addToAgreementClassesBitmap"`.
 */
export function useSuperfluidAddToAgreementClassesBitmap<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'addToAgreementClassesBitmap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'addToAgreementClassesBitmap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'addToAgreementClassesBitmap',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'addToAgreementClassesBitmap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"removeFromAgreementClassesBitmap"`.
 */
export function useSuperfluidRemoveFromAgreementClassesBitmap<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'removeFromAgreementClassesBitmap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'removeFromAgreementClassesBitmap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'removeFromAgreementClassesBitmap',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'removeFromAgreementClassesBitmap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getSuperTokenFactory"`.
 */
export function useSuperfluidGetSuperTokenFactory<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'getSuperTokenFactory'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'getSuperTokenFactory',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getSuperTokenFactory',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getSuperTokenFactory',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getSuperTokenFactoryLogic"`.
 */
export function useSuperfluidGetSuperTokenFactoryLogic<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'getSuperTokenFactoryLogic'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'getSuperTokenFactoryLogic',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getSuperTokenFactoryLogic',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getSuperTokenFactoryLogic',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isApp"`.
 */
export function useSuperfluidIsApp<
  TSelectData = ReadContractResult<typeof superfluidABI, 'isApp'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'isApp', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isApp',
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, 'isApp', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getAppCallbackLevel"`.
 */
export function useSuperfluidGetAppCallbackLevel<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getAppCallbackLevel'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'getAppCallbackLevel',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getAppCallbackLevel',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getAppCallbackLevel',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"getAppManifest"`.
 */
export function useSuperfluidGetAppManifest<
  TSelectData = ReadContractResult<typeof superfluidABI, 'getAppManifest'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'getAppManifest', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'getAppManifest',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'getAppManifest',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isAppJailed"`.
 */
export function useSuperfluidIsAppJailed<
  TSelectData = ReadContractResult<typeof superfluidABI, 'isAppJailed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'isAppJailed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isAppJailed',
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, 'isAppJailed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isCompositeAppAllowed"`.
 */
export function useSuperfluidIsCompositeAppAllowed<
  TSelectData = ReadContractResult<
    typeof superfluidABI,
    'isCompositeAppAllowed'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'isCompositeAppAllowed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isCompositeAppAllowed',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'isCompositeAppAllowed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"decodeCtx"`.
 */
export function useSuperfluidDecodeCtx<
  TSelectData = ReadContractResult<typeof superfluidABI, 'decodeCtx'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'decodeCtx', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'decodeCtx',
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, 'decodeCtx', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isCtxValid"`.
 */
export function useSuperfluidIsCtxValid<
  TSelectData = ReadContractResult<typeof superfluidABI, 'isCtxValid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superfluidABI, 'isCtxValid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isCtxValid',
    ...config,
  } as UseContractReadConfig<typeof superfluidABI, 'isCtxValid', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useSuperfluidIsTrustedForwarder<
  TSelectData = ReadContractResult<typeof superfluidABI, 'isTrustedForwarder'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'isTrustedForwarder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'isTrustedForwarder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"versionRecipient"`.
 */
export function useSuperfluidVersionRecipient<
  TSelectData = ReadContractResult<typeof superfluidABI, 'versionRecipient'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superfluidABI,
      'versionRecipient',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superfluidABI,
    functionName: 'versionRecipient',
    ...config,
  } as UseContractReadConfig<
    typeof superfluidABI,
    'versionRecipient',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__.
 */
export function useSuperfluidWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof superfluidABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, TFunctionName>({
    abi: superfluidABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"castrate"`.
 */
export function useSuperfluidCastrate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'castrate'>['abi'],
        'castrate'
      > & { functionName?: 'castrate' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'castrate'> & {
        abi?: never
        functionName?: 'castrate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'castrate'>({
    abi: superfluidABI,
    functionName: 'castrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"initialize"`.
 */
export function useSuperfluidInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'initialize'>({
    abi: superfluidABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateCode"`.
 */
export function useSuperfluidUpdateCode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'updateCode'>['abi'],
        'updateCode'
      > & { functionName?: 'updateCode' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'updateCode'> & {
        abi?: never
        functionName?: 'updateCode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'updateCode'>({
    abi: superfluidABI,
    functionName: 'updateCode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function useSuperfluidReplaceGovernance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'replaceGovernance'
        >['abi'],
        'replaceGovernance'
      > & { functionName?: 'replaceGovernance' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'replaceGovernance'
      > & {
        abi?: never
        functionName?: 'replaceGovernance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'replaceGovernance'>({
    abi: superfluidABI,
    functionName: 'replaceGovernance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function useSuperfluidRegisterAgreementClass<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'registerAgreementClass'
        >['abi'],
        'registerAgreementClass'
      > & { functionName?: 'registerAgreementClass' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'registerAgreementClass'
      > & {
        abi?: never
        functionName?: 'registerAgreementClass'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superfluidABI,
    'registerAgreementClass'
  >({
    abi: superfluidABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateAgreementClass"`.
 */
export function useSuperfluidUpdateAgreementClass<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'updateAgreementClass'
        >['abi'],
        'updateAgreementClass'
      > & { functionName?: 'updateAgreementClass' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'updateAgreementClass'
      > & {
        abi?: never
        functionName?: 'updateAgreementClass'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'updateAgreementClass'>({
    abi: superfluidABI,
    functionName: 'updateAgreementClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateSuperTokenFactory"`.
 */
export function useSuperfluidUpdateSuperTokenFactory<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'updateSuperTokenFactory'
        >['abi'],
        'updateSuperTokenFactory'
      > & { functionName?: 'updateSuperTokenFactory' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'updateSuperTokenFactory'
      > & {
        abi?: never
        functionName?: 'updateSuperTokenFactory'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superfluidABI,
    'updateSuperTokenFactory'
  >({
    abi: superfluidABI,
    functionName: 'updateSuperTokenFactory',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateSuperTokenLogic"`.
 */
export function useSuperfluidUpdateSuperTokenLogic<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'updateSuperTokenLogic'
        >['abi'],
        'updateSuperTokenLogic'
      > & { functionName?: 'updateSuperTokenLogic' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'updateSuperTokenLogic'
      > & {
        abi?: never
        functionName?: 'updateSuperTokenLogic'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'updateSuperTokenLogic'>(
    {
      abi: superfluidABI,
      functionName: 'updateSuperTokenLogic',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerApp"`.
 */
export function useSuperfluidRegisterApp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'registerApp'>['abi'],
        'registerApp'
      > & { functionName?: 'registerApp' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'registerApp'> & {
        abi?: never
        functionName?: 'registerApp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'registerApp'>({
    abi: superfluidABI,
    functionName: 'registerApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAppWithKey"`.
 */
export function useSuperfluidRegisterAppWithKey<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'registerAppWithKey'
        >['abi'],
        'registerAppWithKey'
      > & { functionName?: 'registerAppWithKey' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'registerAppWithKey'
      > & {
        abi?: never
        functionName?: 'registerAppWithKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'registerAppWithKey'>({
    abi: superfluidABI,
    functionName: 'registerAppWithKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAppByFactory"`.
 */
export function useSuperfluidRegisterAppByFactory<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'registerAppByFactory'
        >['abi'],
        'registerAppByFactory'
      > & { functionName?: 'registerAppByFactory' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'registerAppByFactory'
      > & {
        abi?: never
        functionName?: 'registerAppByFactory'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'registerAppByFactory'>({
    abi: superfluidABI,
    functionName: 'registerAppByFactory',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"allowCompositeApp"`.
 */
export function useSuperfluidAllowCompositeApp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'allowCompositeApp'
        >['abi'],
        'allowCompositeApp'
      > & { functionName?: 'allowCompositeApp' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'allowCompositeApp'
      > & {
        abi?: never
        functionName?: 'allowCompositeApp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'allowCompositeApp'>({
    abi: superfluidABI,
    functionName: 'allowCompositeApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppBeforeCallback"`.
 */
export function useSuperfluidCallAppBeforeCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAppBeforeCallback'
        >['abi'],
        'callAppBeforeCallback'
      > & { functionName?: 'callAppBeforeCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'callAppBeforeCallback'
      > & {
        abi?: never
        functionName?: 'callAppBeforeCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'callAppBeforeCallback'>(
    {
      abi: superfluidABI,
      functionName: 'callAppBeforeCallback',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppAfterCallback"`.
 */
export function useSuperfluidCallAppAfterCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAppAfterCallback'
        >['abi'],
        'callAppAfterCallback'
      > & { functionName?: 'callAppAfterCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'callAppAfterCallback'
      > & {
        abi?: never
        functionName?: 'callAppAfterCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'callAppAfterCallback'>({
    abi: superfluidABI,
    functionName: 'callAppAfterCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"appCallbackPush"`.
 */
export function useSuperfluidAppCallbackPush<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'appCallbackPush'
        >['abi'],
        'appCallbackPush'
      > & { functionName?: 'appCallbackPush' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'appCallbackPush'> & {
        abi?: never
        functionName?: 'appCallbackPush'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'appCallbackPush'>({
    abi: superfluidABI,
    functionName: 'appCallbackPush',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"appCallbackPop"`.
 */
export function useSuperfluidAppCallbackPop<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'appCallbackPop'
        >['abi'],
        'appCallbackPop'
      > & { functionName?: 'appCallbackPop' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'appCallbackPop'> & {
        abi?: never
        functionName?: 'appCallbackPop'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'appCallbackPop'>({
    abi: superfluidABI,
    functionName: 'appCallbackPop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"ctxUseCredit"`.
 */
export function useSuperfluidCtxUseCredit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'ctxUseCredit'>['abi'],
        'ctxUseCredit'
      > & { functionName?: 'ctxUseCredit' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'ctxUseCredit'> & {
        abi?: never
        functionName?: 'ctxUseCredit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'ctxUseCredit'>({
    abi: superfluidABI,
    functionName: 'ctxUseCredit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"jailApp"`.
 */
export function useSuperfluidJailApp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'jailApp'>['abi'],
        'jailApp'
      > & { functionName?: 'jailApp' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'jailApp'> & {
        abi?: never
        functionName?: 'jailApp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'jailApp'>({
    abi: superfluidABI,
    functionName: 'jailApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAgreement"`.
 */
export function useSuperfluidCallAgreement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAgreement'
        >['abi'],
        'callAgreement'
      > & { functionName?: 'callAgreement' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'callAgreement'> & {
        abi?: never
        functionName?: 'callAgreement'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'callAgreement'>({
    abi: superfluidABI,
    functionName: 'callAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppAction"`.
 */
export function useSuperfluidCallAppAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAppAction'
        >['abi'],
        'callAppAction'
      > & { functionName?: 'callAppAction' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'callAppAction'> & {
        abi?: never
        functionName?: 'callAppAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'callAppAction'>({
    abi: superfluidABI,
    functionName: 'callAppAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAgreementWithContext"`.
 */
export function useSuperfluidCallAgreementWithContext<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAgreementWithContext'
        >['abi'],
        'callAgreementWithContext'
      > & { functionName?: 'callAgreementWithContext' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'callAgreementWithContext'
      > & {
        abi?: never
        functionName?: 'callAgreementWithContext'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superfluidABI,
    'callAgreementWithContext'
  >({
    abi: superfluidABI,
    functionName: 'callAgreementWithContext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppActionWithContext"`.
 */
export function useSuperfluidCallAppActionWithContext<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'callAppActionWithContext'
        >['abi'],
        'callAppActionWithContext'
      > & { functionName?: 'callAppActionWithContext' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'callAppActionWithContext'
      > & {
        abi?: never
        functionName?: 'callAppActionWithContext'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superfluidABI,
    'callAppActionWithContext'
  >({
    abi: superfluidABI,
    functionName: 'callAppActionWithContext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"batchCall"`.
 */
export function useSuperfluidBatchCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superfluidABI, 'batchCall'>['abi'],
        'batchCall'
      > & { functionName?: 'batchCall' }
    : UseContractWriteConfig<TMode, typeof superfluidABI, 'batchCall'> & {
        abi?: never
        functionName?: 'batchCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'batchCall'>({
    abi: superfluidABI,
    functionName: 'batchCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"forwardBatchCall"`.
 */
export function useSuperfluidForwardBatchCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superfluidABI,
          'forwardBatchCall'
        >['abi'],
        'forwardBatchCall'
      > & { functionName?: 'forwardBatchCall' }
    : UseContractWriteConfig<
        TMode,
        typeof superfluidABI,
        'forwardBatchCall'
      > & {
        abi?: never
        functionName?: 'forwardBatchCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superfluidABI, 'forwardBatchCall'>({
    abi: superfluidABI,
    functionName: 'forwardBatchCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__.
 */
export function usePrepareSuperfluidWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"castrate"`.
 */
export function usePrepareSuperfluidCastrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'castrate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'castrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'castrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSuperfluidInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateCode"`.
 */
export function usePrepareSuperfluidUpdateCode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'updateCode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'updateCode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'updateCode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function usePrepareSuperfluidReplaceGovernance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'replaceGovernance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'replaceGovernance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'replaceGovernance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function usePrepareSuperfluidRegisterAgreementClass(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'registerAgreementClass'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'registerAgreementClass'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateAgreementClass"`.
 */
export function usePrepareSuperfluidUpdateAgreementClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'updateAgreementClass'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'updateAgreementClass',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'updateAgreementClass'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateSuperTokenFactory"`.
 */
export function usePrepareSuperfluidUpdateSuperTokenFactory(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'updateSuperTokenFactory'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'updateSuperTokenFactory',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'updateSuperTokenFactory'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"updateSuperTokenLogic"`.
 */
export function usePrepareSuperfluidUpdateSuperTokenLogic(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'updateSuperTokenLogic'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'updateSuperTokenLogic',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'updateSuperTokenLogic'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerApp"`.
 */
export function usePrepareSuperfluidRegisterApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'registerApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'registerApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'registerApp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAppWithKey"`.
 */
export function usePrepareSuperfluidRegisterAppWithKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'registerAppWithKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'registerAppWithKey',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'registerAppWithKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"registerAppByFactory"`.
 */
export function usePrepareSuperfluidRegisterAppByFactory(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'registerAppByFactory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'registerAppByFactory',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'registerAppByFactory'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"allowCompositeApp"`.
 */
export function usePrepareSuperfluidAllowCompositeApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'allowCompositeApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'allowCompositeApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'allowCompositeApp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppBeforeCallback"`.
 */
export function usePrepareSuperfluidCallAppBeforeCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'callAppBeforeCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAppBeforeCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'callAppBeforeCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppAfterCallback"`.
 */
export function usePrepareSuperfluidCallAppAfterCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'callAppAfterCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAppAfterCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'callAppAfterCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"appCallbackPush"`.
 */
export function usePrepareSuperfluidAppCallbackPush(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'appCallbackPush'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'appCallbackPush',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'appCallbackPush'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"appCallbackPop"`.
 */
export function usePrepareSuperfluidAppCallbackPop(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'appCallbackPop'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'appCallbackPop',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'appCallbackPop'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"ctxUseCredit"`.
 */
export function usePrepareSuperfluidCtxUseCredit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'ctxUseCredit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'ctxUseCredit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'ctxUseCredit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"jailApp"`.
 */
export function usePrepareSuperfluidJailApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'jailApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'jailApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'jailApp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAgreement"`.
 */
export function usePrepareSuperfluidCallAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'callAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'callAgreement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppAction"`.
 */
export function usePrepareSuperfluidCallAppAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'callAppAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAppAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'callAppAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAgreementWithContext"`.
 */
export function usePrepareSuperfluidCallAgreementWithContext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'callAgreementWithContext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAgreementWithContext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'callAgreementWithContext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"callAppActionWithContext"`.
 */
export function usePrepareSuperfluidCallAppActionWithContext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superfluidABI,
      'callAppActionWithContext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'callAppActionWithContext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superfluidABI,
    'callAppActionWithContext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"batchCall"`.
 */
export function usePrepareSuperfluidBatchCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'batchCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'batchCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'batchCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superfluidABI}__ and `functionName` set to `"forwardBatchCall"`.
 */
export function usePrepareSuperfluidForwardBatchCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superfluidABI, 'forwardBatchCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superfluidABI,
    functionName: 'forwardBatchCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superfluidABI, 'forwardBatchCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__.
 */
export function useSuperfluidEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"AgreementClassRegistered"`.
 */
export function useSuperfluidAgreementClassRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'AgreementClassRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'AgreementClassRegistered',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'AgreementClassRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"AgreementClassUpdated"`.
 */
export function useSuperfluidAgreementClassUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'AgreementClassUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'AgreementClassUpdated',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'AgreementClassUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"AppRegistered"`.
 */
export function useSuperfluidAppRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'AppRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'AppRegistered',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'AppRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"CodeUpdated"`.
 */
export function useSuperfluidCodeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'CodeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'CodeUpdated',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'CodeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"GovernanceReplaced"`.
 */
export function useSuperfluidGovernanceReplacedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'GovernanceReplaced'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'GovernanceReplaced',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'GovernanceReplaced'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSuperfluidInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"Jail"`.
 */
export function useSuperfluidJailEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'Jail'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'Jail',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'Jail'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"SuperTokenFactoryUpdated"`.
 */
export function useSuperfluidSuperTokenFactoryUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'SuperTokenFactoryUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'SuperTokenFactoryUpdated',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'SuperTokenFactoryUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superfluidABI}__ and `eventName` set to `"SuperTokenLogicUpdated"`.
 */
export function useSuperfluidSuperTokenLogicUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superfluidABI, 'SuperTokenLogicUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superfluidABI,
    eventName: 'SuperTokenLogicUpdated',
    ...config,
  } as UseContractEventConfig<typeof superfluidABI, 'SuperTokenLogicUpdated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sethProxyABI}__.
 */
export function useSethProxy(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: sethProxyABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethProxyABI}__.
 */
export function useSethProxyWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethProxyABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sethProxyABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sethProxyABI, TFunctionName>({
    abi: sethProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"initializeProxy"`.
 */
export function useSethProxyInitializeProxy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sethProxyABI,
          'initializeProxy'
        >['abi'],
        'initializeProxy'
      > & { functionName?: 'initializeProxy' }
    : UseContractWriteConfig<TMode, typeof sethProxyABI, 'initializeProxy'> & {
        abi?: never
        functionName?: 'initializeProxy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sethProxyABI, 'initializeProxy'>({
    abi: sethProxyABI,
    functionName: 'initializeProxy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"upgradeByETH"`.
 */
export function useSethProxyUpgradeByEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sethProxyABI, 'upgradeByETH'>['abi'],
        'upgradeByETH'
      > & { functionName?: 'upgradeByETH' }
    : UseContractWriteConfig<TMode, typeof sethProxyABI, 'upgradeByETH'> & {
        abi?: never
        functionName?: 'upgradeByETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sethProxyABI, 'upgradeByETH'>({
    abi: sethProxyABI,
    functionName: 'upgradeByETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"upgradeByETHTo"`.
 */
export function useSethProxyUpgradeByEthTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sethProxyABI,
          'upgradeByETHTo'
        >['abi'],
        'upgradeByETHTo'
      > & { functionName?: 'upgradeByETHTo' }
    : UseContractWriteConfig<TMode, typeof sethProxyABI, 'upgradeByETHTo'> & {
        abi?: never
        functionName?: 'upgradeByETHTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sethProxyABI, 'upgradeByETHTo'>({
    abi: sethProxyABI,
    functionName: 'upgradeByETHTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"downgradeToETH"`.
 */
export function useSethProxyDowngradeToEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sethProxyABI,
          'downgradeToETH'
        >['abi'],
        'downgradeToETH'
      > & { functionName?: 'downgradeToETH' }
    : UseContractWriteConfig<TMode, typeof sethProxyABI, 'downgradeToETH'> & {
        abi?: never
        functionName?: 'downgradeToETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof sethProxyABI, 'downgradeToETH'>({
    abi: sethProxyABI,
    functionName: 'downgradeToETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethProxyABI}__.
 */
export function usePrepareSethProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethProxyABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sethProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sethProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"initializeProxy"`.
 */
export function usePrepareSethProxyInitializeProxy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethProxyABI, 'initializeProxy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sethProxyABI,
    functionName: 'initializeProxy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sethProxyABI, 'initializeProxy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"upgradeByETH"`.
 */
export function usePrepareSethProxyUpgradeByEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethProxyABI, 'upgradeByETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sethProxyABI,
    functionName: 'upgradeByETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sethProxyABI, 'upgradeByETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"upgradeByETHTo"`.
 */
export function usePrepareSethProxyUpgradeByEthTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethProxyABI, 'upgradeByETHTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sethProxyABI,
    functionName: 'upgradeByETHTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sethProxyABI, 'upgradeByETHTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sethProxyABI}__ and `functionName` set to `"downgradeToETH"`.
 */
export function usePrepareSethProxyDowngradeToEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sethProxyABI, 'downgradeToETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sethProxyABI,
    functionName: 'downgradeToETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sethProxyABI, 'downgradeToETH'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethProxyABI}__.
 */
export function useSethProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof sethProxyABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: sethProxyABI,
    ...config,
  } as UseContractEventConfig<typeof sethProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethProxyABI}__ and `eventName` set to `"TokenDowngraded"`.
 */
export function useSethProxyTokenDowngradedEvent(
  config: Omit<
    UseContractEventConfig<typeof sethProxyABI, 'TokenDowngraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sethProxyABI,
    eventName: 'TokenDowngraded',
    ...config,
  } as UseContractEventConfig<typeof sethProxyABI, 'TokenDowngraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sethProxyABI}__ and `eventName` set to `"TokenUpgraded"`.
 */
export function useSethProxyTokenUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof sethProxyABI, 'TokenUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sethProxyABI,
    eventName: 'TokenUpgraded',
    ...config,
  } as UseContractEventConfig<typeof sethProxyABI, 'TokenUpgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link superTokenPoolABI}__.
 */
export function useSuperTokenPool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: superTokenPoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__.
 */
export function useSuperTokenPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof superTokenPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"_superToken"`.
 */
export function useSuperTokenPoolSuperToken<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, '_superToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, '_superToken', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: '_superToken',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    '_superToken',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"admin"`.
 */
export function useSuperTokenPoolAdmin<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'admin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, 'admin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'admin',
    ...config,
  } as UseContractReadConfig<typeof superTokenPoolABI, 'admin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"owner"`.
 */
export function useSuperTokenPoolOwner<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof superTokenPoolABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"pendingUnits"`.
 */
export function useSuperTokenPoolPendingUnits<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'pendingUnits'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'pendingUnits',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'pendingUnits',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'pendingUnits',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getIndex"`.
 */
export function useSuperTokenPoolGetIndex<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'getIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, 'getIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getIndex',
    ...config,
  } as UseContractReadConfig<typeof superTokenPoolABI, 'getIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getTotalUnits"`.
 */
export function useSuperTokenPoolGetTotalUnits<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'getTotalUnits'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getTotalUnits',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getTotalUnits',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getTotalUnits',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getUnits"`.
 */
export function useSuperTokenPoolGetUnits<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'getUnits'>,
>(
  config: Omit<
    UseContractReadConfig<typeof superTokenPoolABI, 'getUnits', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getUnits',
    ...config,
  } as UseContractReadConfig<typeof superTokenPoolABI, 'getUnits', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getDistributionFlowRate"`.
 */
export function useSuperTokenPoolGetDistributionFlowRate<
  TSelectData = ReadContractResult<
    typeof superTokenPoolABI,
    'getDistributionFlowRate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getDistributionFlowRate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getDistributionFlowRate',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getDistributionFlowRate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getPendingDistributionFlowRate"`.
 */
export function useSuperTokenPoolGetPendingDistributionFlowRate<
  TSelectData = ReadContractResult<
    typeof superTokenPoolABI,
    'getPendingDistributionFlowRate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getPendingDistributionFlowRate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getPendingDistributionFlowRate',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getPendingDistributionFlowRate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getMemberFlowRate"`.
 */
export function useSuperTokenPoolGetMemberFlowRate<
  TSelectData = ReadContractResult<
    typeof superTokenPoolABI,
    'getMemberFlowRate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getMemberFlowRate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getMemberFlowRate',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getMemberFlowRate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getPendingDistribution"`.
 */
export function useSuperTokenPoolGetPendingDistribution<
  TSelectData = ReadContractResult<
    typeof superTokenPoolABI,
    'getPendingDistribution'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getPendingDistribution',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getPendingDistribution',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getPendingDistribution',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getClaimableNow"`.
 */
export function useSuperTokenPoolGetClaimableNow<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'getClaimableNow'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getClaimableNow',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getClaimableNow',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getClaimableNow',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"getClaimable"`.
 */
export function useSuperTokenPoolGetClaimable<
  TSelectData = ReadContractResult<typeof superTokenPoolABI, 'getClaimable'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof superTokenPoolABI,
      'getClaimable',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: superTokenPoolABI,
    functionName: 'getClaimable',
    ...config,
  } as UseContractReadConfig<
    typeof superTokenPoolABI,
    'getClaimable',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__.
 */
export function useSuperTokenPoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenPoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof superTokenPoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, TFunctionName>({
    abi: superTokenPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSuperTokenPoolRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenPoolABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenPoolABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, 'renounceOwnership'>(
    {
      abi: superTokenPoolABI,
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSuperTokenPoolTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenPoolABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenPoolABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, 'transferOwnership'>(
    {
      abi: superTokenPoolABI,
      functionName: 'transferOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"updateMember"`.
 */
export function useSuperTokenPoolUpdateMember<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenPoolABI,
          'updateMember'
        >['abi'],
        'updateMember'
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenPoolABI,
        'updateMember'
      > & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, 'updateMember'>({
    abi: superTokenPoolABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"claimAll"`.
 */
export function useSuperTokenPoolClaimAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof superTokenPoolABI, 'claimAll'>['abi'],
        'claimAll'
      > & { functionName?: 'claimAll' }
    : UseContractWriteConfig<TMode, typeof superTokenPoolABI, 'claimAll'> & {
        abi?: never
        functionName?: 'claimAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, 'claimAll'>({
    abi: superTokenPoolABI,
    functionName: 'claimAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"operatorSetIndex"`.
 */
export function useSuperTokenPoolOperatorSetIndex<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenPoolABI,
          'operatorSetIndex'
        >['abi'],
        'operatorSetIndex'
      > & { functionName?: 'operatorSetIndex' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenPoolABI,
        'operatorSetIndex'
      > & {
        abi?: never
        functionName?: 'operatorSetIndex'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof superTokenPoolABI, 'operatorSetIndex'>({
    abi: superTokenPoolABI,
    functionName: 'operatorSetIndex',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"operatorConnectMember"`.
 */
export function useSuperTokenPoolOperatorConnectMember<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof superTokenPoolABI,
          'operatorConnectMember'
        >['abi'],
        'operatorConnectMember'
      > & { functionName?: 'operatorConnectMember' }
    : UseContractWriteConfig<
        TMode,
        typeof superTokenPoolABI,
        'operatorConnectMember'
      > & {
        abi?: never
        functionName?: 'operatorConnectMember'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof superTokenPoolABI,
    'operatorConnectMember'
  >({
    abi: superTokenPoolABI,
    functionName: 'operatorConnectMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__.
 */
export function usePrepareSuperTokenPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenPoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenPoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSuperTokenPoolRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenPoolABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenPoolABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSuperTokenPoolTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenPoolABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenPoolABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareSuperTokenPoolUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenPoolABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenPoolABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"claimAll"`.
 */
export function usePrepareSuperTokenPoolClaimAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenPoolABI, 'claimAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'claimAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof superTokenPoolABI, 'claimAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"operatorSetIndex"`.
 */
export function usePrepareSuperTokenPoolOperatorSetIndex(
  config: Omit<
    UsePrepareContractWriteConfig<typeof superTokenPoolABI, 'operatorSetIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'operatorSetIndex',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenPoolABI,
    'operatorSetIndex'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link superTokenPoolABI}__ and `functionName` set to `"operatorConnectMember"`.
 */
export function usePrepareSuperTokenPoolOperatorConnectMember(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof superTokenPoolABI,
      'operatorConnectMember'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: superTokenPoolABI,
    functionName: 'operatorConnectMember',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof superTokenPoolABI,
    'operatorConnectMember'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenPoolABI}__.
 */
export function useSuperTokenPoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof superTokenPoolABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenPoolABI,
    ...config,
  } as UseContractEventConfig<typeof superTokenPoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenPoolABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSuperTokenPoolOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenPoolABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenPoolABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof superTokenPoolABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link superTokenPoolABI}__ and `eventName` set to `"PoolIndexUpdated"`.
 */
export function useSuperTokenPoolPoolIndexUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof superTokenPoolABI, 'PoolIndexUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: superTokenPoolABI,
    eventName: 'PoolIndexUpdated',
    ...config,
  } as UseContractEventConfig<typeof superTokenPoolABI, 'PoolIndexUpdated'>)
}
